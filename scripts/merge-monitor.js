#!/usr/bin/env node

/**
 * –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–ª–∏—è–Ω–∏—è
 * 
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç
 * —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ –∏—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏.
 */

const fs = require('fs');
const path = require('path');
const { execSync, spawn } = require('child_process');
const { MergeConflictResolver } = require('./merge-conflict-resolver');

class MergeMonitor {
  constructor(options = {}) {
    this.options = {
      interval: options.interval || 30000, // 30 —Å–µ–∫—É–Ω–¥
      maxRetries: options.maxRetries || 3,
      enableSlackNotifications: options.enableSlackNotifications || false,
      slackWebhook: options.slackWebhook || process.env.SLACK_WEBHOOK_URL,
      enableEmailNotifications: options.enableEmailNotifications || false,
      logLevel: options.logLevel || 'info',
      ...options
    };

    this.monitoring = false;
    this.stats = {
      totalChecks: 0,
      conflictsDetected: 0,
      autoResolved: 0,
      manualInterventionRequired: 0,
      startTime: new Date()
    };

    this.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...');
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  async startMonitoring() {
    this.monitoring = true;
    this.log(`üì° –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${this.options.interval}ms`);

    while (this.monitoring) {
      try {
        await this.checkForConflicts();
        this.stats.totalChecks++;
        
        // –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await this.sleep(this.options.interval);
      } catch (error) {
        this.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`, 'error');
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        await this.sleep(5000);
      }
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  stopMonitoring() {
    this.monitoring = false;
    this.log('‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    this.generateReport();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
   */
  async checkForConflicts() {
    const conflictFiles = this.getConflictFiles();
    
    if (conflictFiles.length > 0) {
      this.stats.conflictsDetected++;
      this.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ ${conflictFiles.length} —Ñ–∞–π–ª–∞—Ö: ${conflictFiles.join(', ')}`);
      
      await this.handleConflicts(conflictFiles);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
   */
  async handleConflicts(conflictFiles) {
    this.log(`üõ†Ô∏è –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...`);
    
    try {
      const resolver = new MergeConflictResolver({
        verbose: this.options.logLevel === 'debug',
        dryRun: false
      });

      const result = await resolver.resolveAllConflicts();
      
      if (result.success) {
        this.stats.autoResolved++;
        this.log(`‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
        
        await this.notifySuccess(result);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é git (rebase/merge)
        await this.continueGitOperation();
        
      } else {
        this.stats.manualInterventionRequired++;
        this.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${result.message}`, 'error');
        
        await this.notifyFailure(result, conflictFiles);
        await this.requestManualIntervention(result, conflictFiles);
      }
    } catch (error) {
      this.stats.manualInterventionRequired++;
      this.log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: ${error.message}`, 'error');
      
      await this.notifyError(error, conflictFiles);
      await this.requestManualIntervention({ error: error.message }, conflictFiles);
    }
  }

  /**
   * –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ git –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
   */
  async continueGitOperation() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è git –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
      const gitDir = '.git';
      const rebasePath = path.join(gitDir, 'rebase-apply');
      const mergePath = path.join(gitDir, 'MERGE_HEAD');
      const cherryPickPath = path.join(gitDir, 'CHERRY_PICK_HEAD');

      if (fs.existsSync(rebasePath)) {
        this.log(`üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ rebase...`);
        execSync('git rebase --continue', { stdio: 'inherit' });
        this.log(`‚úÖ Rebase —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω`);
      } else if (fs.existsSync(mergePath)) {
        this.log(`üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ merge...`);
        execSync('git commit --no-edit', { stdio: 'inherit' });
        this.log(`‚úÖ Merge —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω`);
      } else if (fs.existsSync(cherryPickPath)) {
        this.log(`üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ cherry-pick...`);
        execSync('git cherry-pick --continue', { stdio: 'inherit' });
        this.log(`‚úÖ Cherry-pick —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω`);
      } else {
        this.log(`‚ÑπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è git –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è`);
      }
    } catch (error) {
      this.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ git: ${error.message}`, 'warn');
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏
   */
  getConflictFiles() {
    try {
      const output = execSync('git status --porcelain', { encoding: 'utf8' });
      return output
        .split('\n')
        .filter(line => line.startsWith('UU') || line.includes('both modified'))
        .map(line => line.replace(/^UU\s+/, '').trim())
        .filter(Boolean);
    } catch (error) {
      return [];
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
   */
  async notifySuccess(result) {
    const message = `‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!\n\n` +
                   `üìä ${result.message}\n` +
                   `‚è±Ô∏è –í—Ä–µ–º—è: ${new Date().toISOString()}\n` +
                   `üèõÔ∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${this.getRepositoryName()}`;

    await this.sendNotification(message, 'success');
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
   */
  async notifyFailure(result, conflictFiles) {
    const message = `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n` +
                   `‚ùå ${result.message}\n` +
                   `üìÅ –§–∞–π–ª—ã —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏: ${conflictFiles.join(', ')}\n` +
                   `‚è±Ô∏è –í—Ä–µ–º—è: ${new Date().toISOString()}\n` +
                   `üèõÔ∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${this.getRepositoryName()}\n\n` +
                   `üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!`;

    await this.sendNotification(message, 'warning');
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async notifyError(error, conflictFiles) {
    const message = `üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤!\n\n` +
                   `‚ùå ${error.message}\n` +
                   `üìÅ –§–∞–π–ª—ã —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏: ${conflictFiles.join(', ')}\n` +
                   `‚è±Ô∏è –í—Ä–µ–º—è: ${new Date().toISOString()}\n` +
                   `üèõÔ∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${this.getRepositoryName()}\n\n` +
                   `üö® –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!`;

    await this.sendNotification(message, 'error');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async sendNotification(message, level = 'info') {
    this.log(`üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (${level}): ${message.substring(0, 100)}...`);

    const notifications = [];

    // Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (this.options.enableSlackNotifications && this.options.slackWebhook) {
      notifications.push(this.sendSlackNotification(message, level));
    }

    // Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
    if (this.options.enableEmailNotifications) {
      notifications.push(this.sendEmailNotification(message, level));
    }

    // GitHub Issue (–µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)
    if (level === 'error') {
      notifications.push(this.createGitHubIssue(message));
    }

    // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const results = await Promise.allSettled(notifications);
    
    results.forEach((result, index) => {
      if (result.status === 'rejected') {
        this.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${index + 1}: ${result.reason}`, 'warn');
      }
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack
   */
  async sendSlackNotification(message, level) {
    if (!this.options.slackWebhook) {
      throw new Error('Slack webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const colors = {
      success: 'good',
      warning: 'warning',
      error: 'danger',
      info: '#36a64f'
    };

    const payload = {
      username: 'Merge Conflict Monitor',
      icon_emoji: ':robot_face:',
      attachments: [{
        color: colors[level] || colors.info,
        title: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–ª–∏—è–Ω–∏—è',
        text: message,
        ts: Math.floor(Date.now() / 1000)
      }]
    };

    try {
      const response = await fetch(this.options.slackWebhook, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`Slack API error: ${response.status}`);
      }

      this.log('üì§ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Slack: ${error.message}`, 'error');
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendEmailNotification(message, level) {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email —Å–µ—Ä–≤–∏—Å–æ–º
    this.log('üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã', 'warn');
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ GitHub Issue –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
   */
  async createGitHubIssue(message) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ GitHub CLI
      execSync('gh --version', { stdio: 'ignore' });

      const title = `üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ - ${new Date().toISOString().split('T')[0]}`;
      const body = `${message}\n\n---\n\n–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ issue —Å–æ–∑–¥–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.`;

      execSync(`gh issue create --title "${title}" --body "${body}" --label "critical,merge-conflicts,automated"`, {
        stdio: 'inherit'
      });

      this.log('üé´ GitHub issue —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      this.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GitHub issue: ${error.message}`, 'warn');
    }
  }

  /**
   * –ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
   */
  async requestManualIntervention(result, conflictFiles) {
    this.log(`\nüö® –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û üö®`);
    this.log(`üìÅ –§–∞–π–ª—ã —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏: ${conflictFiles.join(', ')}`);
    this.log(`‚ùå –ü—Ä–∏—á–∏–Ω–∞: ${result.message || result.error}`);
    this.log(`\nüìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:`);
    this.log(`1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏ –≤—Ä—É—á–Ω—É—é`);
    this.log(`2. –†–∞–∑—Ä–µ—à–∏—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ –≤–∞—à–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ`);
    this.log(`3. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –∏–Ω–¥–µ–∫—Å: git add <—Ñ–∞–π–ª—ã>`);
    this.log(`4. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é: git rebase --continue –∏–ª–∏ git commit`);
    this.log(`\n‚è±Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${this.options.interval / 1000} —Å–µ–∫—É–Ω–¥...`);

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    // –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
   */
  getRepositoryName() {
    try {
      const remoteUrl = execSync('git remote get-url origin', { encoding: 'utf8' }).trim();
      return remoteUrl.split('/').pop().replace('.git', '');
    } catch (error) {
      return 'unknown-repository';
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Ä–∞–±–æ—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  generateReport() {
    const endTime = new Date();
    const duration = Math.round((endTime - this.stats.startTime) / 1000);

    const report = {
      monitoring: {
        duration: `${duration}s`,
        totalChecks: this.stats.totalChecks,
        conflictsDetected: this.stats.conflictsDetected,
        autoResolved: this.stats.autoResolved,
        manualInterventionRequired: this.stats.manualInterventionRequired
      },
      effectiveness: {
        autoResolutionRate: this.stats.conflictsDetected > 0 
          ? `${Math.round((this.stats.autoResolved / this.stats.conflictsDetected) * 100)}%`
          : '0%'
      },
      timestamp: endTime.toISOString()
    };

    const reportPath = `merge-monitoring-report-${Date.now()}.json`;
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

    this.log(`\nüìä –û–¢–ß–Å–¢ –û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ï:`);
    this.log(`‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}s`);
    this.log(`üîç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${this.stats.totalChecks}`);
    this.log(`‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${this.stats.conflictsDetected}`);
    this.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: ${this.stats.autoResolved}`);
    this.log(`üîß –¢—Ä–µ–±–æ–≤–∞–ª–æ —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞: ${this.stats.manualInterventionRequired}`);
    this.log(`üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${report.effectiveness.autoResolutionRate}`);
    this.log(`üìÅ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${reportPath}`);
  }

  /**
   * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  log(message, level = 'info') {
    const timestamp = new Date().toISOString();
    const prefix = {
      debug: 'üîç',
      info: '‚ÑπÔ∏è',
      warn: '‚ö†Ô∏è',
      error: '‚ùå'
    }[level] || '‚ÑπÔ∏è';

    const logMessage = `[${timestamp}] ${prefix} ${message}`;
    console.log(logMessage);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –ª–æ–≥–∞
    try {
      fs.appendFileSync('merge-monitor.log', logMessage + '\n');
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2);
  
  const options = {
    interval: parseInt(args.find(arg => arg.startsWith('--interval='))?.split('=')[1]) || 30000,
    enableSlackNotifications: args.includes('--slack'),
    slackWebhook: args.find(arg => arg.startsWith('--slack-webhook='))?.split('=')[1],
    logLevel: args.find(arg => arg.startsWith('--log-level='))?.split('=')[1] || 'info'
  };

  if (args.includes('--help') || args.includes('-h')) {
    console.log(`
üîß –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–ª–∏—è–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node merge-monitor.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --interval=ms          –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30000)
  --slack                –í–∫–ª—é—á–∏—Ç—å Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  --slack-webhook=url    URL webhook –¥–ª—è Slack
  --log-level=level      –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (debug, info, warn, error)
  --help, -h             –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node merge-monitor.js --interval=10000 --slack --log-level=debug
  node merge-monitor.js --slack-webhook=https://hooks.slack.com/...

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  SLACK_WEBHOOK_URL      URL webhook –¥–ª—è Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    `);
    process.exit(0);
  }

  console.log('üîß –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–ª–∏—è–Ω–∏—è');
  console.log('=' .repeat(50));

  const monitor = new MergeMonitor(options);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    monitor.stopMonitoring();
    process.exit(0);
  });

  process.on('SIGTERM', () => {
    console.log('\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    monitor.stopMonitoring();
    process.exit(0);
  });

  // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  await monitor.startMonitoring();
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { MergeMonitor };