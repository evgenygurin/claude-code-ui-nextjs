#!/usr/bin/env node

/**
 * Robust Merge Conflict Resolution System
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–ª–∏—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
 * Claude Code UI Next.js. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
 * –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.
 */

const fs = require('fs');
const path = require('path');
const { execSync, exec } = require('child_process');
const crypto = require('crypto');

class MergeConflictResolver {
  constructor(options = {}) {
    this.options = {
      dryRun: options.dryRun || false,
      verbose: options.verbose || false,
      logFile: options.logFile || 'merge-resolution.log',
      backupDir: options.backupDir || '.merge-backups',
      maxAttempts: options.maxAttempts || 3,
      ...options
    };

    this.stats = {
      totalConflicts: 0,
      resolvedConflicts: 0,
      failedConflicts: 0,
      strategies: {},
      startTime: new Date()
    };

    this.conflictStrategies = new Map([
      ['package-lock.json', 'packageLock'],
      ['package.json', 'packageJson'],
      ['.yml', 'yamlMerge'],
      ['.yaml', 'yamlMerge'],
      ['.json', 'jsonMerge'],
      ['.js', 'codeMerge'],
      ['.ts', 'codeMerge'],
      ['.tsx', 'codeMerge'],
      ['.jsx', 'codeMerge'],
      ['.md', 'documentMerge'],
      ['.txt', 'textMerge'],
      ['default', 'intelligentMerge']
    ]);

    this.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...`);
    this.ensureDirectories();
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
   */
  async resolveAllConflicts() {
    this.log(`\nüîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–ª–∏—è–Ω–∏—è...`);
    
    try {
      const conflictFiles = this.getConflictFiles();
      
      if (conflictFiles.length === 0) {
        this.log(`‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!`);
        return { success: true, message: '–ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è' };
      }

      this.stats.totalConflicts = conflictFiles.length;
      this.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: ${conflictFiles.length}`);
      
      // –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
      await this.createBackups(conflictFiles);

      // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
      const results = [];
      for (const filePath of conflictFiles) {
        const result = await this.resolveFileConflict(filePath);
        results.push({ file: filePath, ...result });
        
        if (result.success) {
          this.stats.resolvedConflicts++;
        } else {
          this.stats.failedConflicts++;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const finalCheck = await this.validateResolution();
      
      if (finalCheck.success) {
        this.log(`\nüéâ –í—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!`);
        await this.generateReport(results);
        return { 
          success: true, 
          message: `–†–∞–∑—Ä–µ—à–µ–Ω–æ ${this.stats.resolvedConflicts}/${this.stats.totalConflicts} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤`,
          details: results 
        };
      } else {
        this.log(`\n‚ùå –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã: ${finalCheck.remainingConflicts}`);
        return { 
          success: false, 
          message: `–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å ${finalCheck.remainingConflicts} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤`,
          details: results 
        };
      }

    } catch (error) {
      this.log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: ${error.message}`);
      return { success: false, message: error.message, error };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏
   */
  getConflictFiles() {
    try {
      const output = execSync('git status --porcelain', { encoding: 'utf8' });
      const lines = output.trim().split('\n').filter(line => line.trim());
      
      return lines
        .filter(line => line.startsWith('UU') || line.includes('both modified'))
        .map(line => {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—ã–≤–æ–¥–∞ git status
          const match = line.match(/\s+(.+)$/) || line.match(/UU\s+(.+)$/);
          return match ? match[1].trim() : null;
        })
        .filter(Boolean);
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: ${error.message}`);
      return [];
    }
  }

  /**
   * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∞–π–ª–µ
   */
  async resolveFileConflict(filePath) {
    this.log(`\nüõ†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –≤ —Ñ–∞–π–ª–µ: ${filePath}`);
    
    if (!fs.existsSync(filePath)) {
      return { success: false, message: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', strategy: 'none' };
    }

    const fileContent = fs.readFileSync(filePath, 'utf8');
    if (!this.hasConflictMarkers(fileContent)) {
      this.log(`‚ÑπÔ∏è –§–∞–π–ª ${filePath} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞`);
      return { success: true, message: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç —É–∂–µ —Ä–∞–∑—Ä–µ—à—ë–Ω', strategy: 'already-resolved' };
    }

    const strategy = this.determineStrategy(filePath);
    this.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: ${strategy}`);

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.stats.strategies[strategy] = (this.stats.strategies[strategy] || 0) + 1;

    try {
      const result = await this.applyStrategy(filePath, fileContent, strategy);
      
      if (result.success) {
        this.log(`‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤ ${filePath} —Ä–∞–∑—Ä–µ—à—ë–Ω (${strategy})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        const newContent = fs.readFileSync(filePath, 'utf8');
        if (this.hasConflictMarkers(newContent)) {
          this.log(`‚ö†Ô∏è –§–∞–π–ª ${filePath} –≤—Å—ë –µ—â—ë —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è`);
          return { success: false, message: '–û—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã', strategy };
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∏–Ω–¥–µ–∫—Å git
        if (!this.options.dryRun) {
          execSync(`git add "${filePath}"`);
          this.log(`üìù –§–∞–π–ª ${filePath} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å`);
        }

        return { success: true, message: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω', strategy };
      } else {
        return { success: false, message: result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç', strategy };
      }
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ${strategy}: ${error.message}`);
      return { success: false, message: error.message, strategy };
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
   */
  determineStrategy(filePath) {
    const fileName = path.basename(filePath);
    const fileExt = path.extname(filePath);

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
    if (this.conflictStrategies.has(fileName)) {
      return this.conflictStrategies.get(fileName);
    }

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    if (this.conflictStrategies.has(fileExt)) {
      return this.conflictStrategies.get(fileExt);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return this.conflictStrategies.get('default');
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
   */
  async applyStrategy(filePath, content, strategy) {
    switch (strategy) {
      case 'packageLock':
        return await this.resolvePackageLockConflict(filePath);
      
      case 'packageJson':
        return await this.resolvePackageJsonConflict(filePath, content);
      
      case 'jsonMerge':
        return await this.resolveJsonConflict(filePath, content);
      
      case 'yamlMerge':
        return await this.resolveYamlConflict(filePath, content);
      
      case 'codeMerge':
        return await this.resolveCodeConflict(filePath, content);
      
      case 'documentMerge':
        return await this.resolveDocumentConflict(filePath, content);
      
      case 'textMerge':
        return await this.resolveTextConflict(filePath, content);
      
      case 'intelligentMerge':
      default:
        return await this.resolveIntelligentConflict(filePath, content);
    }
  }

  /**
   * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è package-lock.json - –ø–æ–ª–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
   */
  async resolvePackageLockConflict(filePath) {
    this.log(`üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è package-lock.json...`);
    
    try {
      if (!this.options.dryRun) {
        // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π —Ñ–∞–π–ª
        fs.unlinkSync(filePath);
        
        // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º node_modules –¥–ª—è —á–∏—Å—Ç–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        if (fs.existsSync('node_modules')) {
          this.log(`üßπ –£–¥–∞–ª–µ–Ω–∏–µ node_modules –¥–ª—è —á–∏—Å—Ç–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏...`);
          execSync('rm -rf node_modules');
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º npm install –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ package-lock.json
        this.log(`üì¶ –ó–∞–ø—É—Å–∫ npm install –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ lock —Ñ–∞–π–ª–∞...`);
        execSync('npm install', { stdio: 'inherit' });
        
        this.log(`‚úÖ package-lock.json —É—Å–ø–µ—à–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω`);
      }
      
      return { success: true, message: 'package-lock.json —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω' };
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ package-lock.json: ${error.message}`);
      return { success: false, message: error.message };
    }
  }

  /**
   * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è package.json - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ
   */
  async resolvePackageJsonConflict(filePath, content) {
    try {
      const sections = this.parseConflictSections(content);
      
      // –ü–∞—Ä—Å–∏–º –æ–±–µ –≤–µ—Ä—Å–∏–∏ –∫–∞–∫ JSON
      const ourVersion = JSON.parse(sections.ours);
      const theirVersion = JSON.parse(sections.theirs);
      
      // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
      const merged = this.mergePackageJson(ourVersion, theirVersion);
      
      if (!this.options.dryRun) {
        fs.writeFileSync(filePath, JSON.stringify(merged, null, 2) + '\n');
      }
      
      return { success: true, message: 'package.json –æ–±—ä–µ–¥–∏–Ω—ë–Ω –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ' };
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏ package.json: ${error.message}`);
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é "–Ω–∞—à–∞ –≤–µ—Ä—Å–∏—è"
      return await this.resolveByTakingOurs(filePath, content);
    }
  }

  /**
   * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –≤–µ—Ä—Å–∏–π package.json
   */
  mergePackageJson(ours, theirs) {
    const merged = { ...ours };
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const depFields = ['dependencies', 'devDependencies', 'peerDependencies', 'optionalDependencies'];
    
    for (const field of depFields) {
      if (theirs[field]) {
        merged[field] = merged[field] || {};
        
        // –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—ã–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        for (const [pkg, version] of Object.entries(theirs[field])) {
          if (!merged[field][pkg] || this.isNewerVersion(version, merged[field][pkg])) {
            merged[field][pkg] = version;
          }
        }
      }
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
    if (theirs.scripts) {
      merged.scripts = merged.scripts || {};
      for (const [name, script] of Object.entries(theirs.scripts)) {
        if (!merged.scripts[name]) {
          merged.scripts[name] = script;
        }
      }
    }
    
    return merged;
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π (–º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–æ)
   */
  isNewerVersion(version1, version2) {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –≤—Ä–æ–¥–µ ^, ~, >=
    const clean1 = version1.replace(/^[\^~>=<]+/, '');
    const clean2 = version2.replace(/^[\^~>=<]+/, '');
    
    return clean1.localeCompare(clean2, undefined, { numeric: true }) > 0;
  }

  /**
   * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª–∞—Ö
   */
  async resolveJsonConflict(filePath, content) {
    try {
      const sections = this.parseConflictSections(content);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –æ–±–µ –≤–µ—Ä—Å–∏–∏
      const ourVersion = JSON.parse(sections.ours);
      const theirVersion = JSON.parse(sections.theirs);
      
      // –ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
      const merged = this.deepMerge(ourVersion, theirVersion);
      
      if (!this.options.dryRun) {
        fs.writeFileSync(filePath, JSON.stringify(merged, null, 2) + '\n');
      }
      
      return { success: true, message: 'JSON —Ñ–∞–π–ª –æ–±—ä–µ–¥–∏–Ω—ë–Ω' };
    } catch (error) {
      // –ï—Å–ª–∏ JSON –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é "–Ω–∞—à–∞ –≤–µ—Ä—Å–∏—è"
      return await this.resolveByTakingOurs(filePath, content);
    }
  }

  /**
   * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ YAML —Ñ–∞–π–ª–∞—Ö
   */
  async resolveYamlConflict(filePath, content) {
    // –î–ª—è YAML —Ñ–∞–π–ª–æ–≤ (–æ—Å–æ–±–µ–Ω–Ω–æ GitHub Actions) –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é "–∏—Ö –≤–µ—Ä—Å–∏—è"
    // —Ç–∞–∫ –∫–∞–∫ –æ–±—ã—á–Ω–æ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è workflow —Ñ–∞–π–ª–æ–≤
    return await this.resolveByTakingTheirs(filePath, content);
  }

  /**
   * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ –∫–æ–¥–µ
   */
  async resolveCodeConflict(filePath, content) {
    const sections = this.parseConflictSections(content);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    const analysis = this.analyzeCodeConflict(sections);
    
    if (analysis.canAutoResolve) {
      // –ï—Å–ª–∏ –º–æ–∂–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
      return await this.applyCodeMergeStrategy(filePath, content, sections, analysis);
    } else {
      // –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é "–Ω–∞—à–∞ –≤–µ—Ä—Å–∏—è"
      this.log(`‚ö†Ô∏è –°–ª–æ–∂–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤ –∫–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –≤–µ—Ä—Å–∏—é: ${filePath}`);
      return await this.resolveByTakingOurs(filePath, content);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –≤ –∫–æ–¥–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
   */
  analyzeCodeConflict(sections) {
    const { ours, theirs } = sections;
    
    // –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    const analysis = {
      canAutoResolve: false,
      strategy: 'ours',
      reason: ''
    };
    
    // –ï—Å–ª–∏ –æ–¥–Ω–∞ –≤–µ—Ä—Å–∏—è —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥—Ä—É–≥–æ–π, –º–æ–∂–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å
    if (theirs.includes(ours.trim())) {
      analysis.canAutoResolve = true;
      analysis.strategy = 'theirs';
      analysis.reason = '–ù–∞—à–∞ –≤–µ—Ä—Å–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∏—Ö –≤–µ—Ä—Å–∏–∏';
    } else if (ours.includes(theirs.trim())) {
      analysis.canAutoResolve = true;
      analysis.strategy = 'ours';
      analysis.reason = '–ò—Ö –≤–µ—Ä—Å–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –Ω–∞—à–µ–π –≤–µ—Ä—Å–∏–∏';
    }
    
    return analysis;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–ª–∏—è–Ω–∏—è –∫–æ–¥–∞
   */
  async applyCodeMergeStrategy(filePath, content, sections, analysis) {
    if (analysis.strategy === 'theirs') {
      return await this.resolveByTakingTheirs(filePath, content);
    } else {
      return await this.resolveByTakingOurs(filePath, content);
    }
  }

  /**
   * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
   */
  async resolveDocumentConflict(filePath, content) {
    // –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const sections = this.parseConflictSections(content);
    
    // –ü—Ä–æ—Å—Ç–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: –Ω–∞—à–∞ –≤–µ—Ä—Å–∏—è + –∏—Ö –≤–µ—Ä—Å–∏—è
    const merged = sections.ours.trim() + '\n\n' + sections.theirs.trim();
    
    if (!this.options.dryRun) {
      const finalContent = content.replace(
        /<<<<<<< HEAD.*?>>>>>>> .+$/gms,
        merged
      );
      fs.writeFileSync(filePath, finalContent);
    }
    
    return { success: true, message: '–î–æ–∫—É–º–µ–Ω—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω' };
  }

  /**
   * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
   */
  async resolveTextConflict(filePath, content) {
    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é "–∏—Ö –≤–µ—Ä—Å–∏—è"
    return await this.resolveByTakingTheirs(filePath, content);
  }

  /**
   * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
   */
  async resolveIntelligentConflict(filePath, content) {
    const sections = this.parseConflictSections(content);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    const ourLength = sections.ours.length;
    const theirLength = sections.theirs.length;
    
    if (ourLength === 0 && theirLength > 0) {
      // –ï—Å–ª–∏ –Ω–∞—à–∞ –≤–µ—Ä—Å–∏—è –ø—É—Å—Ç–∞—è, –±–µ—Ä—ë–º –∏—Ö
      return await this.resolveByTakingTheirs(filePath, content);
    } else if (theirLength === 0 && ourLength > 0) {
      // –ï—Å–ª–∏ –∏—Ö –≤–µ—Ä—Å–∏—è –ø—É—Å—Ç–∞—è, –±–µ—Ä—ë–º –Ω–∞—à—É
      return await this.resolveByTakingOurs(filePath, content);
    } else if (theirLength > ourLength * 1.5) {
      // –ï—Å–ª–∏ –∏—Ö –≤–µ—Ä—Å–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –æ–Ω–∞ –±–æ–ª–µ–µ –ø–æ–ª–Ω–∞—è
      return await this.resolveByTakingTheirs(filePath, content);
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä—ë–º –Ω–∞—à—É –≤–µ—Ä—Å–∏—é
      return await this.resolveByTakingOurs(filePath, content);
    }
  }

  /**
   * –°—Ç—Ä–∞—Ç–µ–≥–∏—è "–≤–∑—è—Ç—å –Ω–∞—à—É –≤–µ—Ä—Å–∏—é"
   */
  async resolveByTakingOurs(filePath, content) {
    const resolved = content.replace(/<<<<<<< HEAD\n(.*?)\n=======\n.*?\n>>>>>>> .+$/gms, '$1');
    
    if (!this.options.dryRun) {
      fs.writeFileSync(filePath, resolved);
    }
    
    return { success: true, message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–∞—à–∞ –≤–µ—Ä—Å–∏—è' };
  }

  /**
   * –°—Ç—Ä–∞—Ç–µ–≥–∏—è "–≤–∑—è—Ç—å –∏—Ö –≤–µ—Ä—Å–∏—é"
   */
  async resolveByTakingTheirs(filePath, content) {
    const resolved = content.replace(/<<<<<<< HEAD\n.*?\n=======\n(.*?)\n>>>>>>> .+$/gms, '$1');
    
    if (!this.options.dryRun) {
      fs.writeFileSync(filePath, resolved);
    }
    
    return { success: true, message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏—Ö –≤–µ—Ä—Å–∏—è' };
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å–µ–∫—Ü–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
   */
  parseConflictSections(content) {
    const conflictPattern = /<<<<<<< HEAD\n(.*?)\n=======\n(.*?)\n>>>>>>> .+$/gms;
    const match = conflictPattern.exec(content);
    
    if (!match) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–∞—Ä–∫–µ—Ä—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞');
    }
    
    return {
      ours: match[1] || '',
      theirs: match[2] || ''
    };
  }

  /**
   * –ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
   */
  deepMerge(obj1, obj2) {
    const result = { ...obj1 };
    
    for (const key in obj2) {
      if (obj2.hasOwnProperty(key)) {
        if (typeof obj2[key] === 'object' && obj2[key] !== null && !Array.isArray(obj2[key])) {
          result[key] = this.deepMerge(result[key] || {}, obj2[key]);
        } else {
          result[key] = obj2[key];
        }
      }
    }
    
    return result;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –≤ —Ñ–∞–π–ª–µ
   */
  hasConflictMarkers(content) {
    return content.includes('<<<<<<<') && content.includes('=======') && content.includes('>>>>>>>');
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Ñ–∞–π–ª–æ–≤
   */
  async createBackups(files) {
    if (this.options.dryRun) return;
    
    this.log(`üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π ${files.length} —Ñ–∞–π–ª–æ–≤...`);
    
    for (const filePath of files) {
      try {
        const backupPath = path.join(this.options.backupDir, `${filePath.replace(/\//g, '_')}.backup`);
        const backupDir = path.dirname(backupPath);
        
        if (!fs.existsSync(backupDir)) {
          fs.mkdirSync(backupDir, { recursive: true });
        }
        
        fs.copyFileSync(filePath, backupPath);
        this.log(`üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${filePath} ‚Üí ${backupPath}`);
      } catch (error) {
        this.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è ${filePath}: ${error.message}`);
      }
    }
  }

  /**
   * –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
   */
  async validateResolution() {
    try {
      const remainingConflicts = this.getConflictFiles();
      
      if (remainingConflicts.length === 0) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö
        const filesWithMarkers = await this.findFilesWithConflictMarkers();
        
        if (filesWithMarkers.length === 0) {
          return { success: true, remainingConflicts: 0 };
        } else {
          this.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: ${filesWithMarkers.join(', ')}`);
          return { success: false, remainingConflicts: filesWithMarkers.length, files: filesWithMarkers };
        }
      } else {
        return { success: false, remainingConflicts: remainingConflicts.length, files: remainingConflicts };
      }
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
   */
  async findFilesWithConflictMarkers() {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º git grep –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      const output = execSync('git grep -l "<<<<<<< HEAD" || true', { encoding: 'utf8' });
      return output.trim() ? output.trim().split('\n') : [];
    } catch (error) {
      // –ï—Å–ª–∏ git grep –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä—É—á–Ω—É—é
      return [];
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
   */
  async generateReport(results) {
    const endTime = new Date();
    const duration = Math.round((endTime - this.stats.startTime) / 1000);
    
    const report = {
      timestamp: new Date().toISOString(),
      duration: `${duration}s`,
      summary: {
        totalConflicts: this.stats.totalConflicts,
        resolvedConflicts: this.stats.resolvedConflicts,
        failedConflicts: this.stats.failedConflicts,
        successRate: `${Math.round((this.stats.resolvedConflicts / this.stats.totalConflicts) * 100)}%`
      },
      strategies: this.stats.strategies,
      files: results,
      gitStatus: this.getGitStatus()
    };
    
    const reportPath = `merge-resolution-report-${Date.now()}.json`;
    
    if (!this.options.dryRun) {
      fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
      this.log(`üìä –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: ${reportPath}`);
    }
    
    this.log(`\nüìä –û–¢–ß–Å–¢ –û –†–ê–ó–†–ï–®–ï–ù–ò–ò –ö–û–ù–§–õ–ò–ö–¢–û–í:`);
    this.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}s`);
    this.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${report.summary.successRate} (${this.stats.resolvedConflicts}/${this.stats.totalConflicts})`);
    this.log(`üõ†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${Object.entries(this.stats.strategies).map(([k, v]) => `${k}(${v})`).join(', ')}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ git
   */
  getGitStatus() {
    try {
      return execSync('git status --porcelain', { encoding: 'utf8' }).trim();
    } catch (error) {
      return '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ git';
    }
  }

  /**
   * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
   */
  ensureDirectories() {
    if (!fs.existsSync(this.options.backupDir)) {
      fs.mkdirSync(this.options.backupDir, { recursive: true });
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
   */
  log(message) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}`;
    
    if (this.options.verbose) {
      console.log(logMessage);
    }
    
    if (!this.options.dryRun) {
      fs.appendFileSync(this.options.logFile, logMessage + '\n');
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2);
  const options = {
    dryRun: args.includes('--dry-run'),
    verbose: args.includes('--verbose') || args.includes('-v'),
    maxAttempts: parseInt(args.find(arg => arg.startsWith('--max-attempts='))?.split('=')[1]) || 3
  };

  console.log('üîß –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–ª–∏—è–Ω–∏—è');
  console.log('=' .repeat(60));

  const resolver = new MergeConflictResolver(options);
  const result = await resolver.resolveAllConflicts();

  if (result.success) {
    console.log('\n‚úÖ –í–°–ï –ö–û–ù–§–õ–ò–ö–¢–´ –£–°–ü–ï–®–ù–û –†–ê–ó–†–ï–®–ï–ù–´!');
    console.log(`üìù ${result.message}`);
    process.exit(0);
  } else {
    console.log('\n‚ùå –ù–ï –í–°–ï –ö–û–ù–§–õ–ò–ö–¢–´ –£–î–ê–õ–û–°–¨ –†–ê–ó–†–ï–®–ò–¢–¨');
    console.log(`üìù ${result.message}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { MergeConflictResolver };