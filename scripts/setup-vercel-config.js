#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Vercel
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
 */

const fs = require('fs');
const path = require('path');

class VercelConfigSetup {
  constructor() {
    this.vercelDir = path.join(process.cwd(), '.vercel');
    this.projectFile = path.join(this.vercelDir, 'project.json');
  }

  log(message, type = 'info') {
    const colors = {
      info: '\x1b[36m',    // cyan
      success: '\x1b[32m', // green
      warning: '\x1b[33m', // yellow
      error: '\x1b[31m',   // red
      reset: '\x1b[0m'
    };
    
    console.log(`${colors[type]}${message}${colors.reset}`);
  }

  ensureVercelDirectory() {
    if (!fs.existsSync(this.vercelDir)) {
      fs.mkdirSync(this.vercelDir, { recursive: true });
      this.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è .vercel', 'success');
    }
  }

  createProjectConfig() {
    const projectId = process.env.VERCEL_PROJECT_ID;
    const orgId = process.env.VERCEL_ORG_ID;

    if (!projectId || !orgId) {
      this.log('‚ùå VERCEL_PROJECT_ID –∏–ª–∏ VERCEL_ORG_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è', 'error');
      this.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö CI/CD', 'warning');
      process.exit(1);
    }

    const config = {
      projectId: projectId,
      orgId: orgId
    };

    try {
      fs.writeFileSync(this.projectFile, JSON.stringify(config, null, 2));
      this.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª .vercel/project.json —Å–æ–∑–¥–∞–Ω', 'success');
      this.log(`   Project ID: ${projectId}`, 'info');
      this.log(`   Org ID: ${orgId}`, 'info');
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`, 'error');
      process.exit(1);
    }
  }

  createVercelRC() {
    const vercelRCPath = path.join(process.cwd(), '.vercelrc');
    
    const config = {
      version: 2,
      scope: process.env.VERCEL_ORG_ID,
      builds: [
        {
          src: 'package.json',
          use: '@vercel/node'
        }
      ]
    };

    try {
      fs.writeFileSync(vercelRCPath, JSON.stringify(config, null, 2));
      this.log('‚úÖ –§–∞–π–ª .vercelrc —Å–æ–∑–¥–∞–Ω', 'success');
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .vercelrc: ${error.message}`, 'error');
      process.exit(1);
    }
  }

  validateToken() {
    const token = process.env.VERCEL_TOKEN;
    if (!token) {
      this.log('‚ùå VERCEL_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è', 'error');
      this.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö CI/CD', 'warning');
      process.exit(1);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
    if (token.length < 20) {
      this.log('‚ùå VERCEL_TOKEN –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º', 'error');
      process.exit(1);
    }

    this.log('‚úÖ VERCEL_TOKEN –Ω–∞–π–¥–µ–Ω –∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'success');
  }

  createGitignoreEntries() {
    const gitignorePath = path.join(process.cwd(), '.gitignore');
    const entries = ['.vercel'];
    
    if (fs.existsSync(gitignorePath)) {
      const content = fs.readFileSync(gitignorePath, 'utf8');
      const missingEntries = entries.filter(entry => !content.includes(entry));
      
      if (missingEntries.length > 0) {
        fs.appendFileSync(gitignorePath, '\n# Vercel\n' + missingEntries.join('\n') + '\n');
        this.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤ .gitignore –¥–ª—è Vercel', 'success');
      }
    } else {
      fs.writeFileSync(gitignorePath, '# Vercel\n' + entries.join('\n') + '\n');
      this.log('‚úÖ –°–æ–∑–¥–∞–Ω .gitignore —Å –∑–∞–ø–∏—Å—è–º–∏ –¥–ª—è Vercel', 'success');
    }
  }

  run() {
    this.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Vercel –¥–ª—è CI/CD...', 'info');
    this.log('', 'info');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    this.validateToken();

    // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
    this.ensureVercelDirectory();
    this.createProjectConfig();
    this.createVercelRC();
    this.createGitignoreEntries();

    this.log('', 'info');
    this.log('üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Vercel —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!', 'success');
    this.log('', 'info');
    this.log('üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:', 'info');
    this.log('   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è .vercel', 'info');
    this.log('   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .vercel/project.json —Å ID –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏', 'info');
    this.log('   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .vercelrc —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π', 'info');
    this.log('   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω .gitignore –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è .vercel –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è', 'info');
    this.log('', 'info');
    this.log('üí° –¢–µ–ø–µ—Ä—å Vercel CLI –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ!', 'warning');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  try {
    const setup = new VercelConfigSetup();
    setup.run();
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

module.exports = VercelConfigSetup;