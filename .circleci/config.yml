version: 2.1

orbs:
  node: circleci/node@5.2.0

executors:
  node-executor:
    docker:
      - image: cimg/node:20.10
    working_directory: ~/project

jobs:
  install_dependencies:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            - v1-dependencies-
      - run:
          name: Install Dependencies
          command: npm ci
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
      - persist_to_workspace:
          root: ~/project
          paths:
            - .

  lint:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Linting
          command: npm run lint

  type_check:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Type Checking
          command: npm run type-check

  build:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Build Application
          command: npm run build
      - run:
          name: Check Build Size
          command: |
            echo "Build completed successfully"
            du -sh .next || true
      - persist_to_workspace:
          root: ~/project
          paths:
            - .next

  deploy_preview:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Check deployment prerequisites
          command: |
            echo "üîç Checking deployment prerequisites..."
            echo "Branch: ${CIRCLE_BRANCH}"
            echo "PR URL: ${CIRCLE_PULL_REQUEST}"
            echo "Build number: ${CIRCLE_BUILD_NUM}"
            
            # Check if we have the build artifacts
            if [ -d ".next" ]; then
              echo "‚úÖ Next.js build artifacts found"
              ls -la .next/ | head -10
            else
              echo "‚ùå No .next directory found"
              echo "Available directories:"
              ls -la
            fi
      - run:
          name: Install Vercel CLI
          no_output_timeout: 5m
          command: npm install -g vercel@latest
      - run:
          name: Deploy to Vercel Preview
          no_output_timeout: 20m
          command: |
            # Check if this is a PR or a branch that should have preview deployment
            if [ -n "${CIRCLE_PULL_REQUEST}" ] || [ "${CIRCLE_BRANCH}" != "main" ]; then
              echo "üöÄ Deploying preview for branch: ${CIRCLE_BRANCH}"
              
              # Check if VERCEL_TOKEN is set
              if [ -z "${VERCEL_TOKEN}" ]; then
                echo "‚ö†Ô∏è VERCEL_TOKEN not set. Skipping deployment."
                echo "To enable Vercel deployment, set VERCEL_TOKEN in CircleCI environment variables."
                exit 0
              fi
              
              # Check if build artifacts exist
              if [ ! -d ".next" ]; then
                echo "‚ùå Build artifacts (.next directory) not found. Cannot deploy."
                exit 1
              fi
              
              # Set deployment name for better identification
              DEPLOYMENT_NAME="claude-code-ui-${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
              
              # Try to pull Vercel project configuration
              if ! vercel pull --yes --environment=preview --token=$VERCEL_TOKEN 2>/dev/null; then
                echo "‚ö†Ô∏è Could not pull Vercel project config. Deploying without project config."
                echo "Consider setting up a Vercel project or ensuring VERCEL_PROJECT_ID is set."
              fi
              
              # Deploy with error handling
              echo "üì¶ Deploying to Vercel..."
              if vercel deploy --prebuilt --token=$VERCEL_TOKEN --name="$DEPLOYMENT_NAME" > deployment-url.txt 2>&1; then
                DEPLOYMENT_URL=$(cat deployment-url.txt | tail -1)
                echo "‚úÖ Preview deployment successful!"
                echo "üîó Preview URL: $DEPLOYMENT_URL"
                
                # Save deployment info for potential use in other jobs
                echo "$DEPLOYMENT_URL" > ~/project/preview-url.txt
              else
                echo "‚ùå Deployment failed. Error output:"
                cat deployment-url.txt
                echo ""
                echo "üí° This might be due to:"
                echo "   - Missing VERCEL_TOKEN environment variable"
                echo "   - Missing VERCEL_PROJECT_ID (if using a specific project)"
                echo "   - Network connectivity issues"
                echo "   - Invalid Vercel configuration"
                echo ""
                echo "üîß To fix this:"
                echo "   1. Ensure VERCEL_TOKEN is set in CircleCI environment variables"
                echo "   2. Optionally set VERCEL_PROJECT_ID if you want to deploy to a specific project"
                echo "   3. Check Vercel project settings and permissions"
                echo ""
                echo "‚ö†Ô∏è Continuing CI/CD pipeline despite deployment failure..."
                exit 0  # Don't fail the entire pipeline for deployment issues
              fi
            else
              echo "‚ÑπÔ∏è Not a PR and not on a feature branch. Skipping preview deployment."
              echo "Preview deployments are only created for:"
              echo "  - Pull requests (when CIRCLE_PULL_REQUEST is set)"
              echo "  - Non-main branches"
            fi

  deploy_production:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Vercel CLI
          no_output_timeout: 5m
          command: npm install -g vercel@latest
      - run:
          name: Deploy to Vercel Production
          no_output_timeout: 20m
          command: |
            echo "üöÄ Deploying to production"
            
            # Pull Vercel project configuration
            vercel pull --yes --environment=production --token=$VERCEL_TOKEN
            
            # Skip Vercel build since we already built in previous step
            # Use the prebuilt .next directory from workspace
            vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN > deployment-url.txt
            
            # Output the deployment URL
            echo "‚úÖ Production URL: $(cat deployment-url.txt)"

  security_scan:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install TruffleHog
          command: |
            curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Scan for Secrets
          command: |
            echo "üîç Scanning for hardcoded secrets..."
            trufflehog filesystem --directory=. --exclude-paths=.trufflehogignore --no-verification --json > trufflehog-results.json || true

            # Check if any secrets were found
            if [ -s trufflehog-results.json ]; then
              echo "‚ùå SECURITY ALERT: Potential secrets detected!"
              cat trufflehog-results.json
              exit 1
            else
              echo "‚úÖ No hardcoded secrets detected"
            fi

  codegen_analysis:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install CodeGen CLI
          command: |
            # Install CodeGen CLI tools
            npm install -g @codegen/cli || echo "CodeGen CLI installation skipped"
      - run:
          name: Run CodeGen Analysis
          command: |
            echo "Running CodeGen analysis..."
            # Add CodeGen analysis commands here
            echo "CodeGen analysis completed"
      - run:
          name: Generate AI Test Cases
          command: |
            echo "Generating AI-powered test cases..."
            # Add AI test generation logic here
            echo "AI test generation completed"

  sentry_release:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Create Sentry Release
          command: |
            if [ -n "$SENTRY_AUTH_TOKEN" ]; then
              npm install -g @sentry/cli
              export SENTRY_ORG="${SENTRY_ORG:-default}"
              export SENTRY_PROJECT="${SENTRY_PROJECT}"
              sentry-cli releases new "$CIRCLE_SHA1"
              sentry-cli releases set-commits "$CIRCLE_SHA1" --auto
              sentry-cli releases finalize "$CIRCLE_SHA1"
            else
              echo "SENTRY_AUTH_TOKEN not set, skipping Sentry release"
            fi

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - install_dependencies

      - lint:
          requires:
            - install_dependencies

      - type_check:
          requires:
            - install_dependencies

      - build:
          requires:
            - install_dependencies

      - security_scan:
          requires:
            - install_dependencies

      - deploy_preview:
          requires:
            - lint
            - type_check
            - build
            - security_scan
          filters:
            branches:
              ignore:
                - main
                - master

      - deploy_production:
          requires:
            - lint
            - type_check
            - build
            - security_scan
          filters:
            branches:
              only:
                - main
                - master

      - sentry_release:
          requires:
            - deploy_production
          filters:
            branches:
              only:
                - main
                - master

  # Nightly build to catch issues early
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - install_dependencies
      - lint:
          requires:
            - install_dependencies
      - type_check:
          requires:
            - install_dependencies
      - build:
          requires:
            - install_dependencies

  # CodeGen integration workflow for AI-powered testing
  codegen_integration:
    triggers:
      - schedule:
          cron: "0 6 * * 1"  # Weekly on Mondays
          filters:
            branches:
              only: main
    jobs:
      - install_dependencies
      - lint:
          requires:
            - install_dependencies
      - type_check:
          requires:
            - install_dependencies
      - build:
          requires:
            - install_dependencies
      - codegen_analysis:
          requires:
            - build