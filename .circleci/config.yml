version: 2.1

orbs:
  node: circleci/node@5.2.0

executors:
  node-executor:
    docker:
      - image: cimg/node:20.10
    working_directory: ~/project

jobs:
  install_dependencies:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            - v1-dependencies-
      - run:
          name: Install Dependencies
          command: npm ci
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
      - persist_to_workspace:
          root: ~/project
          paths:
            - .

  lint:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Linting
          command: npm run lint

  type_check:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Type Checking
          command: npm run type-check

  build:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Build Application
          command: npm run build
      - run:
          name: Check Build Size
          command: |
            echo "Build completed successfully"
            du -sh .next || true
      - persist_to_workspace:
          root: ~/project
          paths:
            - .next

  deploy_preview:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Vercel CLI
          no_output_timeout: 5m
          command: npm install -g vercel@latest
      - run:
          name: Setup Vercel Configuration
          command: |
            echo "Setting up Vercel configuration..."
            mkdir -p .vercel
            echo "{
              \"projectId\": \"$VERCEL_PROJECT_ID\",
              \"orgId\": \"$VERCEL_ORG_ID\"
            }" > .vercel/project.json
            echo "‚úÖ Vercel configuration created successfully"
      - run:
          name: Check Auth Tokens
          command: |
            echo "üîç Checking authentication tokens..."
            node scripts/check-auth-tokens.js
          environment:
            VERCEL_TOKEN: $VERCEL_TOKEN
            VERCEL_ORG_ID: $VERCEL_ORG_ID
            VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID
      - run:
          name: Authenticate with Vercel
          command: |
            echo "üîê Authenticating with Vercel..."
            vercel whoami --token=$VERCEL_TOKEN
            echo "‚úÖ Vercel authentication successful"
      - run:
          name: Deploy to Vercel Preview
          no_output_timeout: 20m
          command: |
            if [ -n "${CIRCLE_PULL_REQUEST}" ]; then
              echo "üöÄ Deploying preview for PR ${CIRCLE_PULL_REQUEST}"
              
              # Pull Vercel project configuration
              echo "üì• Pulling Vercel environment information..."
              vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
              
              # Skip Vercel build since we already built in previous step
              # Use the prebuilt .next directory from workspace
              echo "üöÄ Deploying to Vercel..."
              vercel deploy --prebuilt --token=$VERCEL_TOKEN > deployment-url.txt 2>&1
              
              # Output the deployment URL
              deployment_url=$(cat deployment-url.txt | grep -o 'https://[^ ]*\.vercel\.app' | head -1)
              if [ -n "$deployment_url" ]; then
                echo "‚úÖ Preview URL: $deployment_url"
                echo "export PREVIEW_URL='$deployment_url'" >> $BASH_ENV
              else
                echo "‚ùå Failed to extract deployment URL from output:"
                cat deployment-url.txt
                exit 1
              fi
            else
              echo "‚ÑπÔ∏è  Not a PR, skipping preview deployment"
            fi

  deploy_production:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Vercel CLI
          no_output_timeout: 5m
          command: npm install -g vercel@latest
      - run:
          name: Setup Vercel Configuration
          command: |
            echo "Setting up Vercel configuration..."
            mkdir -p .vercel
            echo "{
              \"projectId\": \"$VERCEL_PROJECT_ID\",
              \"orgId\": \"$VERCEL_ORG_ID\"
            }" > .vercel/project.json
            echo "‚úÖ Vercel configuration created successfully"
      - run:
          name: Check Auth Tokens
          command: |
            echo "üîç Checking authentication tokens..."
            node scripts/check-auth-tokens.js
          environment:
            VERCEL_TOKEN: $VERCEL_TOKEN
            VERCEL_ORG_ID: $VERCEL_ORG_ID
            VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID
            SENTRY_AUTH_TOKEN: $SENTRY_AUTH_TOKEN
      - run:
          name: Authenticate with Vercel
          command: |
            echo "üîê Authenticating with Vercel..."
            vercel whoami --token=$VERCEL_TOKEN
            echo "‚úÖ Vercel authentication successful"
      - run:
          name: Deploy to Vercel Production
          no_output_timeout: 20m
          command: |
            echo "üöÄ Deploying to production"
            
            # Pull Vercel project configuration
            echo "üì• Pulling Vercel production environment..."
            vercel pull --yes --environment=production --token=$VERCEL_TOKEN
            
            # Skip Vercel build since we already built in previous step
            # Use the prebuilt .next directory from workspace
            echo "üöÄ Deploying to production..."
            vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN > deployment-url.txt 2>&1
            
            # Output the deployment URL
            deployment_url=$(cat deployment-url.txt | grep -o 'https://[^ ]*\.vercel\.app\|https://[^ ]*\.com' | head -1)
            if [ -n "$deployment_url" ]; then
              echo "‚úÖ Production URL: $deployment_url"
              echo "export PRODUCTION_URL='$deployment_url'" >> $BASH_ENV
            else
              echo "‚ùå Failed to extract deployment URL from output:"
              cat deployment-url.txt
              exit 1
            fi

  security_scan:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install TruffleHog
          command: |
            curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Scan for Secrets
          command: |
            echo "üîç Scanning for hardcoded secrets..."
            trufflehog filesystem --directory=. --exclude-paths=.trufflehogignore --no-verification --json > trufflehog-results.json || true

            # Check if any secrets were found
            if [ -s trufflehog-results.json ]; then
              echo "‚ùå SECURITY ALERT: Potential secrets detected!"
              cat trufflehog-results.json
              exit 1
            else
              echo "‚úÖ No hardcoded secrets detected"
            fi

  codegen_analysis:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install CodeGen CLI
          command: |
            # Install CodeGen CLI tools
            npm install -g @codegen/cli || echo "CodeGen CLI installation skipped"
      - run:
          name: Run CodeGen Analysis
          command: |
            echo "Running CodeGen analysis..."
            # Add CodeGen analysis commands here
            echo "CodeGen analysis completed"
      - run:
          name: Generate AI Test Cases
          command: |
            echo "Generating AI-powered test cases..."
            # Add AI test generation logic here
            echo "AI test generation completed"

  sentry_release:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Create Sentry Release
          command: |
            if [ -n "$SENTRY_AUTH_TOKEN" ]; then
              npm install -g @sentry/cli
              export SENTRY_ORG="${SENTRY_ORG:-default}"
              export SENTRY_PROJECT="${SENTRY_PROJECT}"
              sentry-cli releases new "$CIRCLE_SHA1"
              sentry-cli releases set-commits "$CIRCLE_SHA1" --auto
              sentry-cli releases finalize "$CIRCLE_SHA1"
            else
              echo "SENTRY_AUTH_TOKEN not set, skipping Sentry release"
            fi

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - install_dependencies

      - lint:
          requires:
            - install_dependencies

      - type_check:
          requires:
            - install_dependencies

      - build:
          requires:
            - install_dependencies

      - security_scan:
          requires:
            - install_dependencies

      - deploy_preview:
          requires:
            - lint
            - type_check
            - build
            - security_scan
          filters:
            branches:
              ignore:
                - main
                - master

      - deploy_production:
          requires:
            - lint
            - type_check
            - build
            - security_scan
          filters:
            branches:
              only:
                - main
                - master

      - sentry_release:
          requires:
            - deploy_production
          filters:
            branches:
              only:
                - main
                - master

  # Nightly build to catch issues early
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - install_dependencies
      - lint:
          requires:
            - install_dependencies
      - type_check:
          requires:
            - install_dependencies
      - build:
          requires:
            - install_dependencies

  # CodeGen integration workflow for AI-powered testing
  codegen_integration:
    triggers:
      - schedule:
          cron: "0 6 * * 1"  # Weekly on Mondays
          filters:
            branches:
              only: main
    jobs:
      - install_dependencies
      - lint:
          requires:
            - install_dependencies
      - type_check:
          requires:
            - install_dependencies
      - build:
          requires:
            - install_dependencies
      - codegen_analysis:
          requires:
            - build