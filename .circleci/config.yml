version: 2.1

# CircleCI orbs for common tasks
orbs:
  node: circleci/node@5.2.0
  vercel: circleci/vercel@1.0.3

# Define reusable executors
executors:
  node-executor:
    docker:
      - image: cimg/node:20.11
    working_directory: ~/project

# Define jobs
jobs:
  # Install dependencies and cache them
  install-dependencies:
    executor: node-executor
    steps:
      - checkout
      - node/install-packages:
          cache-path: ~/project/node_modules
          override-ci-command: npm ci
      - persist_to_workspace:
          root: ~/project
          paths:
            - .

  # Run linting and type checking
  lint-and-type-check:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Run ESLint
          command: npm run lint
      - run:
          name: Run TypeScript type checking
          command: npm run type-check

  # Build the application
  build:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Build Next.js application
          command: npm run build
      - persist_to_workspace:
          root: ~/project
          paths:
            - .next
            - out

  # Deploy to Vercel Preview (for non-main branches)
  deploy-preview:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - vercel/install
      - run:
          name: Deploy to Vercel Preview
          command: |
            vercel --token $VERCEL_TOKEN --confirm
          environment:
            VERCEL_ORG_ID: $VERCEL_ORG_ID
            VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID

  # Deploy to Vercel Production (for main branch)
  deploy-production:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - vercel/install
      - run:
          name: Deploy to Vercel Production
          command: |
            vercel --token $VERCEL_TOKEN --confirm --prod
          environment:
            VERCEL_ORG_ID: $VERCEL_ORG_ID
            VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID

  # Codegen integration job
  codegen-analysis:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Codegen CLI
          command: |
            curl -fsSL https://cli.codegen.com/install.sh | sh
            echo 'export PATH=$PATH:~/.codegen/bin' >> $BASH_ENV
      - run:
          name: Run Codegen analysis
          command: |
            source $BASH_ENV
            codegen analyze --format=json > codegen-report.json || true
      - store_artifacts:
          path: codegen-report.json
          destination: codegen-analysis
      - run:
          name: Post Codegen results to PR
          command: |
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              source $BASH_ENV
              codegen comment --pr-url="$CIRCLE_PULL_REQUEST" || true
            fi

# Define workflows
workflows:
  version: 2

  # Main workflow for all branches
  build-test-deploy:
    jobs:
      # Always run these jobs
      - install-dependencies

      - lint-and-type-check:
          requires:
            - install-dependencies

      - build:
          requires:
            - install-dependencies

      - codegen-analysis:
          requires:
            - install-dependencies
          context: codegen-context

      # Deploy to preview for all branches except main
      - deploy-preview:
          requires:
            - lint-and-type-check
            - build
          filters:
            branches:
              ignore: 
                - main
          context: vercel-context

      # Deploy to production only for main branch
      - deploy-production:
          requires:
            - lint-and-type-check
            - build
            - codegen-analysis
          filters:
            branches:
              only: main
          context: vercel-context

  # Nightly workflow for additional checks
  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *" # Run at 2 AM UTC every day
          filters:
            branches:
              only: main
    jobs:
      - install-dependencies
      - codegen-analysis:
          requires:
            - install-dependencies
          context: codegen-context