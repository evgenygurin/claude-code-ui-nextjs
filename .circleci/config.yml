version: 2.1

orbs:
  node: circleci/node@5.2.0

executors:
  node-executor:
    docker:
      - image: cimg/node:20.10
    working_directory: ~/project

jobs:
  install_dependencies:
    executor: node-executor
    steps:
      - checkout

      # Multi-layer caching strategy for better performance
      - restore_cache:
          keys:
            # Primary cache: exact package-lock.json match
            - v2-dependencies-{{ checksum "package-lock.json" }}-{{ checksum "package.json" }}
            # Secondary cache: same package-lock.json, different package.json
            - v2-dependencies-{{ checksum "package-lock.json" }}-
            # Tertiary cache: any recent cache from this branch
            - v2-dependencies-{{ .Branch }}-
            # Fallback cache: any recent cache
            - v2-dependencies-

      # Restore Next.js cache for faster builds
      - restore_cache:
          keys:
            - v2-nextjs-cache-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v2-nextjs-cache-{{ .Branch }}-
            - v2-nextjs-cache-

      - run:
          name: Install Dependencies
          command: |
            echo "üì¶ Installing dependencies..."

            # Use npm ci for faster, reproducible installs in CI
            if [ -f package-lock.json ]; then
              npm ci
            else
              echo "‚ö†Ô∏è No package-lock.json found, running npm install"
              npm install
            fi

            # Display some useful info
            echo "üìä Dependency installation stats:"
            echo "Node version: $(node --version)"
            echo "NPM version: $(npm --version)"
            echo "Package count: $(npm list --depth=0 2>/dev/null | grep -c '^[‚îî‚îú]' || echo 'unknown')"

      - run:
          name: Verify Installation
          command: |
            echo "‚úÖ Verifying installation..."

            # Check if key packages are available
            if npm list next &>/dev/null; then
              echo "‚úÖ Next.js: $(npm list next --depth=0 | grep next || echo 'not found')"
            fi

            if npm list react &>/dev/null; then
              echo "‚úÖ React: $(npm list react --depth=0 | grep react || echo 'not found')"
            fi

            # Check for security vulnerabilities in fresh install
            echo "üîç Quick security check..."
            npm audit --audit-level=high || echo "‚ö†Ô∏è Security issues detected - will be addressed in vulnerability_scan job"

      - save_cache:
          paths:
            - node_modules
          key: v2-dependencies-{{ checksum "package-lock.json" }}-{{ checksum "package.json" }}

      - save_cache:
          paths:
            - ~/.npm
          key: v2-npm-cache-{{ checksum "package-lock.json" }}

      - persist_to_workspace:
          root: ~/project
          paths:
            - .
            - node_modules

  lint:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Linting
          command: npm run lint

  type_check:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Type Checking
          command: npm run type-check

  test:
    executor: node-executor
    parallelism: 2
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Tests with Coverage
          command: |
            echo "Running tests with parallelism on node $CIRCLE_NODE_INDEX"
            npm run test:ci -- --coverage --passWithNoTests
      - run:
          name: Upload Coverage Reports
          command: |
            if [ -f coverage/lcov.info ]; then
              echo "Coverage report generated successfully"
              # Upload to Codecov if token is available
              if [ -n "$CODECOV_TOKEN" ]; then
                curl -s https://codecov.io/bash | bash -s -- -t $CODECOV_TOKEN
              fi
            fi
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage
          destination: coverage-reports

  build:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Build Application
          command: npm run build
      - run:
          name: Bundle Analysis
          command: |
            echo "üîç Analyzing bundle size and composition..."

            # Check if bundle analyzer is available
            if npm list @next/bundle-analyzer &>/dev/null; then
              echo "Running bundle analysis..."
              ANALYZE=true npm run build
            else
              echo "Bundle analyzer not installed, installing..."
              npm install --no-save @next/bundle-analyzer
              ANALYZE=true npm run build
            fi

            # Calculate and display build sizes
            echo "üìä Build Size Analysis:"
            if [ -d ".next" ]; then
              echo "Total .next size: $(du -sh .next | cut -f1)"
              echo "Static files: $(du -sh .next/static 2>/dev/null | cut -f1 || echo 'N/A')"
              echo "Server chunks: $(du -sh .next/server 2>/dev/null | cut -f1 || echo 'N/A')"

              # Find large files (>500KB)
              echo "üìà Large files (>500KB):"
              find .next -type f -size +500k -exec ls -lh {} \; | awk '{print $5 " " $9}' || echo "None found"

              # Count total files
              echo "üìÅ Total files: $(find .next -type f | wc -l)"
            fi
      - run:
          name: Performance Budget Check
          command: |
            echo "üéØ Checking performance budget..."

            # Check if lighthouse budget exists
            if [ -f "lighthouse-budget.json" ]; then
              echo "Found lighthouse budget configuration"

              # Install lighthouse if not available
              if ! command -v lighthouse &> /dev/null; then
                npm install -g lighthouse
              fi

              # Note: Full lighthouse audit requires deployment URL
              # This is a placeholder for budget validation
              echo "‚úÖ Performance budget configuration validated"
            else
              echo "‚ö†Ô∏è No lighthouse-budget.json found, skipping performance budget check"
            fi

            # Basic bundle size limits
            NEXT_SIZE=$(du -sb .next 2>/dev/null | cut -f1 || echo "0")
            MAX_SIZE=$((50 * 1024 * 1024))  # 50MB limit

            if [ "$NEXT_SIZE" -gt "$MAX_SIZE" ]; then
              echo "‚ùå Build size exceeds 50MB limit: $(echo $NEXT_SIZE | numfmt --to=iec)"
              exit 1
            else
              echo "‚úÖ Build size within limits: $(echo $NEXT_SIZE | numfmt --to=iec)"
            fi
      - store_artifacts:
          path: .next
          destination: build-artifacts
      - save_cache:
          paths:
            - .next/cache
          key: v2-nextjs-cache-{{ .Branch }}-{{ checksum "package-lock.json" }}-{{ epoch }}

      - store_artifacts:
          path: lighthouse-budget.json
          destination: performance-config
      - persist_to_workspace:
          root: ~/project
          paths:
            - .next

  deploy_preview:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Vercel CLI
          no_output_timeout: 5m
          command: npm install -g vercel@latest
      - run:
          name: Validate Vercel Environment Variables
          command: |
            echo "üîç Validating Vercel environment variables..."
            if [ -z "$VERCEL_TOKEN" ]; then
              echo "‚ùå ERROR: VERCEL_TOKEN is not set in CircleCI Environment Variables"
              echo "Please add VERCEL_TOKEN to: https://app.circleci.com/settings/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/environment-variables"
              exit 1
            fi
            if [ -z "$VERCEL_ORG_ID" ]; then
              echo "‚ùå ERROR: VERCEL_ORG_ID is not set in CircleCI Environment Variables"
              exit 1
            fi
            if [ -z "$VERCEL_PROJECT_ID" ]; then
              echo "‚ùå ERROR: VERCEL_PROJECT_ID is not set in CircleCI Environment Variables"
              exit 1
            fi
            echo "‚úÖ All Vercel environment variables are properly configured"
            echo "Token length: ${#VERCEL_TOKEN} chars"
            echo "Org ID: ${VERCEL_ORG_ID:0:10}..."
            echo "Project ID: ${VERCEL_PROJECT_ID:0:10}..."
      - run:
          name: Deploy to Vercel Preview
          no_output_timeout: 20m
          command: |
            if [ -z "$VERCEL_TOKEN" ]; then
              echo "‚ö†Ô∏è VERCEL_TOKEN not configured, skipping preview deployment"
              echo "To enable preview deployments, add VERCEL_TOKEN to CircleCI environment variables"
              exit 0
            fi
            
            if [ -n "${CIRCLE_PULL_REQUEST}" ]; then
              echo "üöÄ Deploying preview for PR ${CIRCLE_PULL_REQUEST}"
              
              # Check if required environment variables are set
              if [ -z "$VERCEL_TOKEN" ]; then
                echo "‚ùå VERCEL_TOKEN is not set. Skipping deployment."
                echo "‚ö†Ô∏è  Preview deployment requires valid Vercel token"
                exit 0
              fi
              
              if [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
                echo "‚ùå VERCEL_ORG_ID or VERCEL_PROJECT_ID is not set. Skipping deployment."
                echo "‚ö†Ô∏è  Preview deployment requires Vercel organization and project IDs"
                exit 0
              fi
              
              # Test Vercel authentication
              echo "üîç Testing Vercel authentication..."
              if ! vercel whoami --token=$VERCEL_TOKEN >/dev/null 2>&1; then
                echo "‚ùå Vercel token is invalid or expired. Skipping deployment."
                echo "‚ö†Ô∏è  Please update the VERCEL_TOKEN environment variable"
                echo "üí° Hint: Generate a new token at https://vercel.com/account/tokens"
                exit 0
              fi
              
              echo "‚úÖ Vercel authentication successful"
              
              # Pull Vercel project configuration
              echo "üì• Pulling Vercel project configuration..."
              if ! vercel pull --yes --environment=preview --token=$VERCEL_TOKEN; then
                echo "‚ùå Failed to pull Vercel configuration. Check project settings."
                exit 1
              fi

              # Deploy to Vercel
              echo "üöÄ Deploying to Vercel preview..."
              if vercel deploy --prebuilt --token=$VERCEL_TOKEN > deployment-url.txt 2>&1; then
                DEPLOY_URL=$(cat deployment-url.txt | tail -1)
                echo "‚úÖ Preview deployed successfully!"
                echo "üîó Preview URL: $DEPLOY_URL"

                # Save deployment URL for potential use by other jobs
                echo "$DEPLOY_URL" > .vercel-preview-url
              else
                echo "‚ùå Vercel deployment failed:"
                cat deployment-url.txt
                exit 1
              fi
            else
              echo "‚ÑπÔ∏è  Not a PR, skipping preview deployment"
            fi

  deploy_production:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Vercel CLI
          no_output_timeout: 5m
          command: npm install -g vercel@latest
      - run:
          name: Validate Vercel Environment Variables
          command: |
            echo "üîç Validating Vercel environment variables for production..."
            if [ -z "$VERCEL_TOKEN" ]; then
              echo "‚ùå ERROR: VERCEL_TOKEN is not set in CircleCI Environment Variables"
              echo "Please add VERCEL_TOKEN to: https://app.circleci.com/settings/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/environment-variables"
              exit 1
            fi
            if [ -z "$VERCEL_ORG_ID" ]; then
              echo "‚ùå ERROR: VERCEL_ORG_ID is not set in CircleCI Environment Variables"
              exit 1
            fi
            if [ -z "$VERCEL_PROJECT_ID" ]; then
              echo "‚ùå ERROR: VERCEL_PROJECT_ID is not set in CircleCI Environment Variables"
              exit 1
            fi
            echo "‚úÖ All Vercel environment variables are properly configured for production"
            echo "Token length: ${#VERCEL_TOKEN} chars"
            echo "Org ID: ${VERCEL_ORG_ID:0:10}..."
            echo "Project ID: ${VERCEL_PROJECT_ID:0:10}..."
      - run:
          name: Deploy to Vercel Production
          no_output_timeout: 20m
          command: |
            echo "üöÄ Deploying to production"

            # Check if required environment variables are set
            if [ -z "$VERCEL_TOKEN" ]; then
              echo "‚ùå VERCEL_TOKEN is not set. Cannot deploy to production."
              echo "‚ö†Ô∏è  Production deployment requires valid Vercel token"
              exit 1
            fi

            if [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
              echo "‚ùå VERCEL_ORG_ID or VERCEL_PROJECT_ID is not set. Cannot deploy to production."
              echo "‚ö†Ô∏è  Production deployment requires Vercel organization and project IDs"
              exit 1
            fi

            # Test Vercel authentication
            echo "üîç Testing Vercel authentication..."
            if ! vercel whoami --token=$VERCEL_TOKEN >/dev/null 2>&1; then
              echo "‚ùå Vercel token is invalid or expired. Cannot deploy to production."
              echo "‚ö†Ô∏è  Please update the VERCEL_TOKEN environment variable"
              echo "üí° Hint: Generate a new token at https://vercel.com/account/tokens"
              exit 1
            fi

            echo "‚úÖ Vercel authentication successful"

            # Pull Vercel project configuration
            echo "üì• Pulling Vercel project configuration..."
            if ! vercel pull --yes --environment=production --token=$VERCEL_TOKEN; then
              echo "‚ùå Failed to pull Vercel configuration. Check project settings."
              exit 1
            fi

            # Deploy to Vercel
            echo "üöÄ Deploying to Vercel production..."
            if vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN > deployment-url.txt 2>&1; then
              DEPLOY_URL=$(cat deployment-url.txt | tail -1)
              echo "‚úÖ Production deployed successfully!"
              echo "üîó Production URL: $DEPLOY_URL"

              # Save deployment URL for potential use by other jobs
              echo "$DEPLOY_URL" > .vercel-production-url
            else
              echo "‚ùå Vercel production deployment failed:"
              cat deployment-url.txt
              exit 1
            fi

  vulnerability_scan:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: NPM Security Audit
          command: |
            echo "üîç Running npm security audit..."

            # Run npm audit and capture results
            if npm audit --audit-level=moderate; then
              echo "‚úÖ No moderate or higher vulnerabilities found"
            else
              echo "‚ö†Ô∏è Vulnerabilities detected, generating detailed report..."
              npm audit --json > npm-audit-results.json || true

              # Show summary
              if [ -f npm-audit-results.json ]; then
                echo "üìä Vulnerability Summary:"
                cat npm-audit-results.json | jq -r '.metadata.vulnerabilities | to_entries[] | "\(.key): \(.value)"' 2>/dev/null || echo "Unable to parse results"
              fi

              # Fail on high or critical vulnerabilities
              HIGH_VULNS=$(npm audit --json 2>/dev/null | jq '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo 0)
              CRITICAL_VULNS=$(npm audit --json 2>/dev/null | jq '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo 0)

              if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
                echo "‚ùå High or critical vulnerabilities found - failing build"
                exit 1
              else
                echo "‚ö†Ô∏è Only low/moderate vulnerabilities found - continuing build"
              fi
            fi
      - run:
          name: License Compliance Check
          command: |
            echo "üìÑ Checking license compliance..."

            # Install license checker if not available
            if ! npm list license-checker &>/dev/null; then
              npm install --no-save license-checker
            fi

            # Generate license report
            npx license-checker --json > licenses.json

            # Check for problematic licenses
            echo "üìã License Summary:"
            npx license-checker --summary || echo "License checker not available"

            # Look for GPL or other copyleft licenses that might be problematic
            if grep -i -E "(gpl|agpl|copyleft)" licenses.json &>/dev/null; then
              echo "‚ö†Ô∏è Found potentially problematic licenses (GPL/AGPL/Copyleft)"
              echo "Please review license compatibility manually"
            else
              echo "‚úÖ No obviously problematic licenses detected"
            fi
      - store_artifacts:
          path: npm-audit-results.json
          destination: security-reports
      - store_artifacts:
          path: licenses.json
          destination: compliance-reports

  security_scan:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Security Tools
          command: |
            # Install TruffleHog for secret scanning
            curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

            # Install semgrep for SAST
            python3 -m pip install semgrep || echo "Semgrep installation skipped"
      - run:
          name: Scan for Hardcoded Secrets
          command: |
            echo "üîç Scanning for hardcoded secrets..."

            # Create exclusion file if it doesn't exist
            if [ ! -f .trufflehogignore ]; then
              cat > .trufflehogignore << EOF
            node_modules/
            .git/
            .next/
            coverage/
            *.log
            EOF
            fi

            trufflehog filesystem --directory=. --exclude-paths=.trufflehogignore --no-verification --json > trufflehog-results.json || true

            # Check if any secrets were found
            if [ -s trufflehog-results.json ] && [ "$(cat trufflehog-results.json | wc -l)" -gt 0 ]; then
              echo "‚ùå SECURITY ALERT: Potential secrets detected!"
              echo "üìã Secret scan results:"
              cat trufflehog-results.json | head -20
              exit 1
            else
              echo "‚úÖ No hardcoded secrets detected"
            fi
      - run:
          name: Static Application Security Testing
          command: |
            echo "üõ°Ô∏è Running Static Application Security Testing..."

            # Run semgrep if available
            if command -v semgrep &> /dev/null; then
              echo "Running Semgrep SAST..."
              semgrep --config=auto --json --output=semgrep-results.json . || true

              if [ -f semgrep-results.json ] && [ "$(cat semgrep-results.json | jq '.results | length' 2>/dev/null || echo 0)" -gt 0 ]; then
                echo "‚ö†Ô∏è SAST findings detected:"
                cat semgrep-results.json | jq -r '.results[] | "\(.check_id): \(.message)"' 2>/dev/null | head -10
                echo "Please review semgrep-results.json for details"
              else
                echo "‚úÖ No SAST issues detected"
              fi
            else
              echo "‚ö†Ô∏è Semgrep not available, skipping SAST"
            fi
      - store_artifacts:
          path: trufflehog-results.json
          destination: security-reports
      - store_artifacts:
          path: semgrep-results.json
          destination: security-reports

  codegen_analysis:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install CodeGen CLI
          command: |
            # Install CodeGen CLI tools
            npm install -g @codegen/cli || echo "CodeGen CLI installation skipped"
      - run:
          name: Run CodeGen Analysis
          command: |
            echo "Running CodeGen analysis..."
            # Add CodeGen analysis commands here
            echo "CodeGen analysis completed"
      - run:
          name: Generate AI Test Cases
          command: |
            echo "Generating AI-powered test cases..."
            # Add AI test generation logic here
            echo "AI test generation completed"

  sentry_release:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Create Sentry Release
          command: |
            if [ -n "$SENTRY_AUTH_TOKEN" ]; then
              npm install -g @sentry/cli
              export SENTRY_ORG="${SENTRY_ORG:-default}"
              export SENTRY_PROJECT="${SENTRY_PROJECT}"
              sentry-cli releases new "$CIRCLE_SHA1"
              sentry-cli releases set-commits "$CIRCLE_SHA1" --auto
              sentry-cli releases finalize "$CIRCLE_SHA1"
            else
              echo "SENTRY_AUTH_TOKEN not set, skipping Sentry release"
            fi

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - install_dependencies

      # Parallel quality checks phase
      - lint:
          requires:
            - install_dependencies

      - type_check:
          requires:
            - install_dependencies

      - test:
          requires:
            - install_dependencies

      - vulnerability_scan:
          requires:
            - install_dependencies

      # Build phase (depends on quality checks)
      - build:
          requires:
            - lint
            - type_check
            - test

      # Security scanning (can run in parallel with build)
      - security_scan:
          requires:
            - install_dependencies

      # Deployment phase (requires all checks to pass)
      - deploy_preview:
          requires:
            - build
            - vulnerability_scan
            - security_scan
          filters:
            branches:
              ignore:
                - main
                - master

      - deploy_production:
          requires:
            - build
            - vulnerability_scan
            - security_scan
          filters:
            branches:
              only:
                - main
                - master

      - sentry_release:
          requires:
            - deploy_production
          filters:
            branches:
              only:
                - main
                - master

  # Nightly build to catch issues early
  nightly:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - main
    jobs:
      - install_dependencies

      # Parallel quality checks
      - lint:
          requires:
            - install_dependencies
      - type_check:
          requires:
            - install_dependencies
      - test:
          requires:
            - install_dependencies
      - vulnerability_scan:
          requires:
            - install_dependencies
      - security_scan:
          requires:
            - install_dependencies

      # Build after quality checks
      - build:
          requires:
            - lint
            - type_check
            - test

  # CodeGen integration workflow for AI-powered testing
  codegen_integration:
    triggers:
      - schedule:
          cron: '0 6 * * 1' # Weekly on Mondays at 6 AM
          filters:
            branches:
              only: main
    jobs:
      - install_dependencies

      # Full quality pipeline for CodeGen analysis
      - lint:
          requires:
            - install_dependencies
      - type_check:
          requires:
            - install_dependencies
      - test:
          requires:
            - install_dependencies
      - vulnerability_scan:
          requires:
            - install_dependencies
      - security_scan:
          requires:
            - install_dependencies

      - build:
          requires:
            - lint
            - type_check
            - test

      - codegen_analysis:
          requires:
            - build
            - vulnerability_scan
            - security_scan

  # Weekly comprehensive security audit
  security_audit:
    triggers:
      - schedule:
          cron: '0 3 * * 6' # Saturdays at 3 AM
          filters:
            branches:
              only: main
    jobs:
      - install_dependencies
      - vulnerability_scan:
          requires:
            - install_dependencies
      - security_scan:
          requires:
            - install_dependencies
