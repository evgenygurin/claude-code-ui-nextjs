version: 2.1

orbs:
  node: circleci/node@5.2.0

executors:
  node-executor:
    docker:
      - image: cimg/node:20.10
    working_directory: ~/project

jobs:
  install_dependencies:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            - v1-dependencies-
      - run:
          name: Install Dependencies
          command: npm ci
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
      - persist_to_workspace:
          root: ~/project
          paths:
            - .

  lint:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Linting
          command: npm run lint

  type_check:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Type Checking
          command: npm run type-check

  build:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Build Application
          command: npm run build
      - run:
          name: Check Build Size
          command: |
            echo "Build completed successfully"
            du -sh .next || true
      - persist_to_workspace:
          root: ~/project
          paths:
            - .next

  deploy_preview:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Vercel CLI
          no_output_timeout: 5m
          command: npm install -g vercel@latest
      - run:
          name: Deploy to Vercel Preview
          no_output_timeout: 20m
          command: |
            if [ -n "${CIRCLE_PULL_REQUEST}" ]; then
              echo "üöÄ Deploying preview for PR ${CIRCLE_PULL_REQUEST}"
              
              # Check if required environment variables are set
              if [ -z "$VERCEL_TOKEN" ]; then
                echo "‚ùå VERCEL_TOKEN is not set. Skipping deployment."
                echo "‚ö†Ô∏è  Preview deployment requires valid Vercel token"
                exit 0
              fi
              
              if [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
                echo "‚ùå VERCEL_ORG_ID or VERCEL_PROJECT_ID is not set. Skipping deployment."
                echo "‚ö†Ô∏è  Preview deployment requires Vercel organization and project IDs"
                exit 0
              fi
              
              # Test Vercel authentication
              echo "üîç Testing Vercel authentication..."
              if ! vercel whoami --token=$VERCEL_TOKEN >/dev/null 2>&1; then
                echo "‚ùå Vercel token is invalid or expired. Skipping deployment."
                echo "‚ö†Ô∏è  Please update the VERCEL_TOKEN environment variable"
                echo "üí° Hint: Generate a new token at https://vercel.com/account/tokens"
                exit 0
              fi
              
              echo "‚úÖ Vercel authentication successful"
              
              # Pull Vercel project configuration
              echo "üì• Pulling Vercel project configuration..."
              if ! vercel pull --yes --environment=preview --token=$VERCEL_TOKEN; then
                echo "‚ùå Failed to pull Vercel configuration. Check project settings."
                exit 1
              fi
              
              # Deploy to Vercel
              echo "üöÄ Deploying to Vercel preview..."
              if vercel deploy --prebuilt --token=$VERCEL_TOKEN > deployment-url.txt 2>&1; then
                DEPLOY_URL=$(cat deployment-url.txt | tail -1)
                echo "‚úÖ Preview deployed successfully!"
                echo "üîó Preview URL: $DEPLOY_URL"
                
                # Save deployment URL for potential use by other jobs
                echo "$DEPLOY_URL" > .vercel-preview-url
              else
                echo "‚ùå Vercel deployment failed:"
                cat deployment-url.txt
                exit 1
              fi
            else
              echo "‚ÑπÔ∏è  Not a PR, skipping preview deployment"
            fi

  deploy_production:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Vercel CLI
          no_output_timeout: 5m
          command: npm install -g vercel@latest
      - run:
          name: Deploy to Vercel Production
          no_output_timeout: 20m
          command: |
            echo "üöÄ Deploying to production"
            
            # Check if required environment variables are set
            if [ -z "$VERCEL_TOKEN" ]; then
              echo "‚ùå VERCEL_TOKEN is not set. Cannot deploy to production."
              echo "‚ö†Ô∏è  Production deployment requires valid Vercel token"
              exit 1
            fi
            
            if [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
              echo "‚ùå VERCEL_ORG_ID or VERCEL_PROJECT_ID is not set. Cannot deploy to production."
              echo "‚ö†Ô∏è  Production deployment requires Vercel organization and project IDs"
              exit 1
            fi
            
            # Test Vercel authentication
            echo "üîç Testing Vercel authentication..."
            if ! vercel whoami --token=$VERCEL_TOKEN >/dev/null 2>&1; then
              echo "‚ùå Vercel token is invalid or expired. Cannot deploy to production."
              echo "‚ö†Ô∏è  Please update the VERCEL_TOKEN environment variable"
              echo "üí° Hint: Generate a new token at https://vercel.com/account/tokens"
              exit 1
            fi
            
            echo "‚úÖ Vercel authentication successful"
            
            # Pull Vercel project configuration
            echo "üì• Pulling Vercel project configuration..."
            if ! vercel pull --yes --environment=production --token=$VERCEL_TOKEN; then
              echo "‚ùå Failed to pull Vercel configuration. Check project settings."
              exit 1
            fi
            
            # Deploy to Vercel
            echo "üöÄ Deploying to Vercel production..."
            if vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN > deployment-url.txt 2>&1; then
              DEPLOY_URL=$(cat deployment-url.txt | tail -1)
              echo "‚úÖ Production deployed successfully!"
              echo "üîó Production URL: $DEPLOY_URL"
              
              # Save deployment URL for potential use by other jobs
              echo "$DEPLOY_URL" > .vercel-production-url
            else
              echo "‚ùå Vercel production deployment failed:"
              cat deployment-url.txt
              exit 1
            fi

  security_scan:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install TruffleHog
          command: |
            curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Scan for Secrets
          command: |
            echo "üîç Scanning for hardcoded secrets..."
            trufflehog filesystem --directory=. --exclude-paths=.trufflehogignore --no-verification --json > trufflehog-results.json || true

            # Check if any secrets were found
            if [ -s trufflehog-results.json ]; then
              echo "‚ùå SECURITY ALERT: Potential secrets detected!"
              cat trufflehog-results.json
              exit 1
            else
              echo "‚úÖ No hardcoded secrets detected"
            fi

  codegen_analysis:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install CodeGen CLI
          command: |
            # Install CodeGen CLI tools
            npm install -g @codegen/cli || echo "CodeGen CLI installation skipped"
      - run:
          name: Run CodeGen Analysis
          command: |
            echo "Running CodeGen analysis..."
            # Add CodeGen analysis commands here
            echo "CodeGen analysis completed"
      - run:
          name: Generate AI Test Cases
          command: |
            echo "Generating AI-powered test cases..."
            # Add AI test generation logic here
            echo "AI test generation completed"

  sentry_release:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Create Sentry Release
          command: |
            if [ -n "$SENTRY_AUTH_TOKEN" ]; then
              npm install -g @sentry/cli
              export SENTRY_ORG="${SENTRY_ORG:-default}"
              export SENTRY_PROJECT="${SENTRY_PROJECT}"
              sentry-cli releases new "$CIRCLE_SHA1"
              sentry-cli releases set-commits "$CIRCLE_SHA1" --auto
              sentry-cli releases finalize "$CIRCLE_SHA1"
            else
              echo "SENTRY_AUTH_TOKEN not set, skipping Sentry release"
            fi

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - install_dependencies

      - lint:
          requires:
            - install_dependencies

      - type_check:
          requires:
            - install_dependencies

      - build:
          requires:
            - install_dependencies

      - security_scan:
          requires:
            - install_dependencies

      - deploy_preview:
          requires:
            - lint
            - type_check
            - build
            - security_scan
          filters:
            branches:
              ignore:
                - main
                - master

      - deploy_production:
          requires:
            - lint
            - type_check
            - build
            - security_scan
          filters:
            branches:
              only:
                - main
                - master

      - sentry_release:
          requires:
            - deploy_production
          filters:
            branches:
              only:
                - main
                - master

  # Nightly build to catch issues early
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - install_dependencies
      - lint:
          requires:
            - install_dependencies
      - type_check:
          requires:
            - install_dependencies
      - build:
          requires:
            - install_dependencies

  # CodeGen integration workflow for AI-powered testing
  codegen_integration:
    triggers:
      - schedule:
          cron: "0 6 * * 1"  # Weekly on Mondays
          filters:
            branches:
              only: main
    jobs:
      - install_dependencies
      - lint:
          requires:
            - install_dependencies
      - type_check:
          requires:
            - install_dependencies
      - build:
          requires:
            - install_dependencies
      - codegen_analysis:
          requires:
            - build