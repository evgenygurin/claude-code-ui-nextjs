name: Claude Interactive Assistant
on:
  # Реагируем на комментарии с упоминанием @claude
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  
  # Реагируем на новые issues с меткой claude-task
  issues:
    types: [opened, labeled]
    
  # Реагируем на review
  pull_request_review:
    types: [submitted]

jobs:
  interactive:
    # Запускаем только если есть упоминание @claude или метка claude-task
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'claude-task'))
      
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Parse Claude Commands
        id: parse
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let body = '';
            if (context.eventName === 'issue_comment') {
              body = context.payload.comment.body;
            } else if (context.eventName === 'pull_request_review_comment') {
              body = context.payload.comment.body;
            } else if (context.eventName === 'pull_request_review') {
              body = context.payload.review.body;
            } else if (context.eventName === 'issues') {
              body = context.payload.issue.body || '';
            }
            
            // Parse special commands
            const commands = {
              fix: body.includes('@claude fix'),
              review: body.includes('@claude review'),
              explain: body.includes('@claude explain'),
              test: body.includes('@claude test'),
              optimize: body.includes('@claude optimize'),
              document: body.includes('@claude document'),
              security: body.includes('@claude security'),
              refactor: body.includes('@claude refactor'),
              implement: body.includes('@claude implement'),
              debug: body.includes('@claude debug'),
              analyze: body.includes('@claude analyze'),
              suggest: body.includes('@claude suggest'),
              benchmark: body.includes('@claude benchmark'),
              migrate: body.includes('@claude migrate'),
              deploy: body.includes('@claude deploy')
            };
            
            core.setOutput('commands', JSON.stringify(commands));
            core.setOutput('body', body);
            
      - name: Claude Interactive Response
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          # Visual progress for interactive commands
          track_progress: true
          
          # Sticky comment для PR
          use_sticky_comment: ${{ github.event_name == 'pull_request_review_comment' }}
          
          # Дополнительные разрешения
          additional_permissions: |
            actions: read
          
          # Динамический prompt на основе команд
          prompt: |
            Context:
            - Repository: ${{ github.repository }}
            - Event: ${{ github.event_name }}
            - User: ${{ github.actor }}
            ${{ github.event.pull_request && format('- PR #{0}: {1}', github.event.pull_request.number, github.event.pull_request.title) || '' }}
            ${{ github.event.issue && format('- Issue #{0}: {1}', github.event.issue.number, github.event.issue.title) || '' }}
            
            User message:
            ${{ steps.parse.outputs.body }}
            
            Commands detected: ${{ steps.parse.outputs.commands }}
            
            Based on the user's request, please help with the following:
            
            ${{ contains(steps.parse.outputs.body, '@claude fix') && '
            FIX REQUEST:
            1. Identify the issue described
            2. Create a fix branch
            3. Implement the solution
            4. Add tests if needed
            5. Create a pull request with the fix
            ' || '' }}
            
            ${{ contains(steps.parse.outputs.body, '@claude review') && '
            REVIEW REQUEST:
            1. Perform comprehensive code review
            2. Check for bugs and security issues
            3. Suggest improvements
            4. Rate code quality
            5. Provide actionable feedback
            ' || '' }}
            
            ${{ contains(steps.parse.outputs.body, '@claude explain') && '
            EXPLANATION REQUEST:
            1. Explain the code or concept in detail
            2. Provide examples
            3. Clarify complex logic
            4. Add helpful context
            5. Suggest learning resources
            ' || '' }}
            
            ${{ contains(steps.parse.outputs.body, '@claude test') && '
            TEST REQUEST:
            1. Write comprehensive tests
            2. Include edge cases
            3. Ensure good coverage
            4. Add test documentation
            5. Run tests and report results
            ' || '' }}
            
            ${{ contains(steps.parse.outputs.body, '@claude optimize') && '
            OPTIMIZATION REQUEST:
            1. Analyze performance bottlenecks
            2. Suggest optimizations
            3. Implement improvements
            4. Measure impact
            5. Document changes
            ' || '' }}
            
            ${{ contains(steps.parse.outputs.body, '@claude document') && '
            DOCUMENTATION REQUEST:
            1. Write comprehensive documentation
            2. Add code examples
            3. Include API references
            4. Create guides
            5. Update README if needed
            ' || '' }}
            
            ${{ contains(steps.parse.outputs.body, '@claude security') && '
            SECURITY AUDIT REQUEST:
            1. Scan for vulnerabilities
            2. Check OWASP Top 10
            3. Review authentication
            4. Validate inputs
            5. Suggest hardening measures
            ' || '' }}
            
            ${{ contains(steps.parse.outputs.body, '@claude refactor') && '
            REFACTORING REQUEST:
            1. Identify code smells
            2. Improve code structure
            3. Apply design patterns
            4. Enhance readability
            5. Ensure backward compatibility
            ' || '' }}
            
            ${{ contains(steps.parse.outputs.body, '@claude implement') && '
            IMPLEMENTATION REQUEST:
            1. Understand requirements
            2. Design solution
            3. Implement feature
            4. Add tests
            5. Create PR with implementation
            ' || '' }}
            
            ${{ contains(steps.parse.outputs.body, '@claude debug') && '
            DEBUG REQUEST:
            1. Analyze the bug
            2. Identify root cause
            3. Suggest debugging steps
            4. Provide fix if possible
            5. Add regression tests
            ' || '' }}
            
            Always be helpful, thorough, and proactive. If you can fix issues automatically, do so.
            
          # Расширенная конфигурация
          claude_args: |
            --model claude-3-5-sonnet-20241022
            --max-turns 15
            --allowedTools "Bash,Read,Write,Edit,MultiEdit,WebSearch"
            --system-prompt "You are Claude, an interactive AI assistant. Respond to user requests professionally and thoroughly. Be proactive in solving problems and creating solutions."