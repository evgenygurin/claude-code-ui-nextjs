name: Post-Merge Health Monitoring

on:
  push:
    branches: [main, master]
  schedule:
    # Check every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check to perform'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - quick
          - deep_analysis
          - problem_resolution_check
      force_codegen_trigger:
        description: 'Force CodeGen trigger regardless of health status'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  MONITORING_ENABLED: true

jobs:
  pr-health-check:
    name: PR Health Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run basic health checks for PR
        run: |
          echo "🔍 Running basic PR health checks..."
          npm run lint
          npm run type-check  
          npm run test:ci
          npm run build
          echo "✅ PR health checks passed"
      
  post-merge-health-check:
    name: Post-Merge Health Assessment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    outputs:
      health-status: ${{ steps.health-assessment.outputs.status }}
      requires-intervention: ${{ steps.health-assessment.outputs.requires-intervention }}
      health-score: ${{ steps.health-assessment.outputs.score }}
      issues-detected: ${{ steps.health-assessment.outputs.issues }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Initialize health monitoring
      run: |
        echo "🏥 Starting post-merge health assessment..."
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Check type: ${{ github.event.inputs.check_type || 'comprehensive' }}"
        
        # Create monitoring directories
        mkdir -p .health-monitoring/{reports,baselines,trends}
        
        # Set baseline timestamp for this check
        echo "$(date -u)" > .health-monitoring/last-check.txt

    - name: Run comprehensive health checks
      id: health-assessment
      run: |
        echo "🔍 Running health assessment..."
        
        # Initialize variables
        HEALTH_SCORE=100
        ISSUES=()
        WARNINGS=()
        CRITICAL_ISSUES=false
        
        echo "## 📊 Post-Merge Health Assessment Report" > health-report.md
        echo "**Timestamp:** $(date -u)" >> health-report.md
        echo "**Commit:** ${{ github.sha }}" >> health-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> health-report.md
        echo "" >> health-report.md
        
        # 1. Code Quality Check
        echo "### 🧹 Code Quality" >> health-report.md
        if npm run lint 2>/dev/null; then
          echo "- ✅ Linting: PASSED" >> health-report.md
        else
          echo "- ❌ Linting: FAILED" >> health-report.md
          ISSUES+=("linting_failed")
          HEALTH_SCORE=$((HEALTH_SCORE - 20))
        fi
        
        if npm run type-check 2>/dev/null; then
          echo "- ✅ Type checking: PASSED" >> health-report.md
        else
          echo "- ❌ Type checking: FAILED" >> health-report.md
          ISSUES+=("type_check_failed")
          HEALTH_SCORE=$((HEALTH_SCORE - 25))
          CRITICAL_ISSUES=true
        fi
        
        # 2. Test Suite Health
        echo "### 🧪 Test Suite" >> health-report.md
        if npm run test:ci 2>/dev/null; then
          echo "- ✅ Tests: PASSED" >> health-report.md
          
          # Check coverage if available
          if [ -f "coverage/lcov-report/index.html" ]; then
            COVERAGE=$(grep -oE '[0-9]+\.[0-9]+%' coverage/lcov-report/index.html | head -1 | sed 's/%//' || echo "0")
            # Use awk for floating point comparison instead of bc
            if [ $(echo "$COVERAGE" | awk '{print ($1 >= 80) ? 1 : 0}') -eq 1 ]; then
              echo "- ✅ Coverage: ${COVERAGE}% (Good)" >> health-report.md
            else
              echo "- ⚠️ Coverage: ${COVERAGE}% (Low)" >> health-report.md
              WARNINGS+=("low_coverage")
              HEALTH_SCORE=$((HEALTH_SCORE - 10))
            fi
          fi
        else
          echo "- ❌ Tests: FAILED" >> health-report.md
          ISSUES+=("tests_failed")
          HEALTH_SCORE=$((HEALTH_SCORE - 30))
          CRITICAL_ISSUES=true
        fi
        
        # 3. Build Health
        echo "### 🏗️ Build System" >> health-report.md
        if npm run build 2>/dev/null; then
          echo "- ✅ Build: SUCCESS" >> health-report.md
          
          # Check build size
          if [ -d ".next" ]; then
            BUILD_SIZE=$(du -sh .next | cut -f1)
            echo "- ℹ️ Build size: $BUILD_SIZE" >> health-report.md
          fi
        else
          echo "- ❌ Build: FAILED" >> health-report.md
          ISSUES+=("build_failed")
          HEALTH_SCORE=$((HEALTH_SCORE - 35))
          CRITICAL_ISSUES=true
        fi
        
        # 4. Security Status
        echo "### 🛡️ Security" >> health-report.md
        # Check if npm is available and run audit
        if command -v npm >/dev/null; then
          if npm audit --audit-level=moderate 2>/dev/null; then
            echo "- ✅ Security audit: CLEAN" >> health-report.md
          else
            # Check if audit found vulnerabilities vs other errors  
            if npm audit --audit-level=moderate --json 2>/dev/null | grep -q '"vulnerabilities"'; then
              echo "- ⚠️ Security audit: VULNERABILITIES DETECTED" >> health-report.md
              WARNINGS+=("security_vulnerabilities")
              HEALTH_SCORE=$((HEALTH_SCORE - 15))
            else
              echo "- ℹ️ Security audit: Could not complete (may require network)" >> health-report.md
              # Don't penalize for network/tool availability issues in CI environment
            fi
          fi
        else
          echo "- ⚠️ Security audit: SKIPPED (npm not available)" >> health-report.md
        fi
        
        # 5. Git Status Check
        echo "### 📝 Repository Health" >> health-report.md
        
        # Check for uncommitted changes
        if [ -z "$(git status --porcelain)" ]; then
          echo "- ✅ Working directory: CLEAN" >> health-report.md
        else
          echo "- ⚠️ Working directory: UNCOMMITTED CHANGES" >> health-report.md
          WARNINGS+=("uncommitted_changes")
        fi
        
        # Check recent activity
        RECENT_COMMITS=$(git log --since="24 hours ago" --oneline | wc -l)
        echo "- ℹ️ Recent commits (24h): $RECENT_COMMITS" >> health-report.md
        
        # 6. Performance Baseline
        echo "### ⚡ Performance" >> health-report.md
        
        # Basic performance check (build time)
        BUILD_START=$(date +%s)
        if npm run build >/dev/null 2>&1; then
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - BUILD_START))
        else
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - BUILD_START))
          echo "- ⚠️ Performance build failed, timing may be inaccurate" >> health-report.md
        fi
        
        echo "- ℹ️ Build time: ${BUILD_TIME}s" >> health-report.md
        
        if [ $BUILD_TIME -gt 300 ]; then  # 5 minutes
          echo "- ⚠️ Build time is longer than expected" >> health-report.md
          WARNINGS+=("slow_build")
          HEALTH_SCORE=$((HEALTH_SCORE - 5))
        fi
        
        # 7. Final Assessment
        echo "### 📊 Overall Health" >> health-report.md
        echo "- **Health Score:** $HEALTH_SCORE/100" >> health-report.md
        
        REQUIRES_INTERVENTION=false
        if [ ${#ISSUES[@]} -gt 0 ]; then
          echo "- **Issues Detected:** ${#ISSUES[@]}" >> health-report.md
          echo "- **Issue Types:** ${ISSUES[*]}" >> health-report.md
          REQUIRES_INTERVENTION=true
        fi
        
        if [ ${#WARNINGS[@]} -gt 0 ]; then
          echo "- **Warnings:** ${#WARNINGS[@]}" >> health-report.md
          echo "- **Warning Types:** ${WARNINGS[*]}" >> health-report.md
        fi
        
        # Determine overall status
        if [ "$CRITICAL_ISSUES" = true ]; then
          STATUS="critical"
          echo "- **Status:** 🚨 CRITICAL - Immediate intervention required" >> health-report.md
          REQUIRES_INTERVENTION=true
        elif [ $HEALTH_SCORE -lt 70 ]; then
          STATUS="degraded"
          echo "- **Status:** ⚠️ DEGRADED - Issues need attention" >> health-report.md
          REQUIRES_INTERVENTION=true
        elif [ $HEALTH_SCORE -lt 90 ]; then
          STATUS="warning"
          echo "- **Status:** 🟡 WARNING - Minor issues detected" >> health-report.md
        else
          STATUS="healthy"
          echo "- **Status:** ✅ HEALTHY - All systems operational" >> health-report.md
        fi
        
        echo "### 🤖 Automated Actions" >> health-report.md
        if [ "$REQUIRES_INTERVENTION" = true ] || [ "${{ github.event.inputs.force_codegen_trigger }}" = true ]; then
          echo "- CodeGen intervention will be triggered" >> health-report.md
        else
          echo "- No immediate action required" >> health-report.md
        fi
        
        # Set outputs
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "requires-intervention=$REQUIRES_INTERVENTION" >> $GITHUB_OUTPUT
        echo "score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
        echo "issues=${ISSUES[*]}" >> $GITHUB_OUTPUT
        
        # Save report
        cp health-report.md ".health-monitoring/reports/$(date +%Y%m%d-%H%M%S)-health-report.md"
        
        echo "🏥 Health assessment completed"
        echo "Status: $STATUS"
        echo "Score: $HEALTH_SCORE/100"
        echo "Requires intervention: $REQUIRES_INTERVENTION"

    - name: Schedule follow-up monitoring
      if: always()
      run: |
        echo "⏰ Setting up continuous monitoring tasks..."
        if [ -f "scripts/task-scheduler.js" ]; then
          node scripts/task-scheduler.js schedule-health-monitoring \
            --status="${{ steps.health-assessment.outputs.status }}" \
            --score="${{ steps.health-assessment.outputs.score }}" \
            --issues="${{ steps.health-assessment.outputs.issues }}" || echo "Monitoring setup completed with issues"
        else
          echo "⚠️ Task scheduler script not found, skipping continuous monitoring setup"
        fi

    - name: Upload health report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: health-report-${{ github.run_number }}
        path: |
          health-report.md
          .health-monitoring/reports/
        retention-days: 30

  trigger-codegen-intervention:
    name: CodeGen Intervention
    runs-on: ubuntu-latest
    needs: [post-merge-health-check]
    if: |
      always() &&
      github.event_name != 'pull_request' &&
      (needs.post-merge-health-check.outputs.requires-intervention == 'true' || github.event.inputs.force_codegen_trigger == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Trigger CodeGen analysis
      run: |
        echo "🚨 Health issues detected - triggering CodeGen intervention"
        
        # Prepare detailed context for CodeGen
        HEALTH_STATUS="${{ needs.post-merge-health-check.outputs.health-status }}"
        HEALTH_SCORE="${{ needs.post-merge-health-check.outputs.health-score }}"
        ISSUES="${{ needs.post-merge-health-check.outputs.issues-detected }}"
        
        # Use the enhanced error handler if available
        if [ -f "scripts/codegen-error-handler.js" ]; then
          node scripts/codegen-error-handler.js "post_merge_health_issues" \
            "Health status: $HEALTH_STATUS, Score: $HEALTH_SCORE/100, Issues: $ISSUES" || echo "CodeGen intervention completed with issues"
        else
          echo "⚠️ CodeGen error handler script not found, skipping intervention"
        fi

    - name: Create detailed GitHub issue
      if: needs.post-merge-health-check.outputs.health-status == 'critical'
      uses: actions/github-script@v7
      with:
        script: |
          const healthStatus = '${{ needs.post-merge-health-check.outputs.health-status }}';
          const healthScore = '${{ needs.post-merge-health-check.outputs.health-score }}';
          const issues = '${{ needs.post-merge-health-check.outputs.issues-detected }}';
          const runUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
          const branch = '${{ github.ref_name }}';
          const commit = '${{ github.sha }}';
          
          const issueBody = 'Critical Post-Merge Health Issues Detected\n\n' +
            'Health Assessment Results:\n' +
            '- Status: ' + healthStatus.toUpperCase() + '\n' +
            '- Health Score: ' + healthScore + '/100\n' +
            '- Issues Detected: ' + (issues || 'None specified') + '\n' +
            '- Monitoring Run: ' + runUrl + '\n' +
            '- Branch: ' + branch + '\n' +
            '- Commit: ' + commit + '\n' +
            '- Timestamp: ' + new Date().toISOString() + '\n\n' +
            '@codegen CRITICAL INTERVENTION REQUIRED\n\n' +
            'Required Actions:\n' +
            '1. Immediate Analysis: Review the health monitoring results\n' +
            '2. Fix Critical Issues: Address all failing components\n' +
            '3. Comprehensive Testing: Ensure all fixes are properly tested\n' +
            '4. Quality Assurance: Verify that the health score returns to >90\n' +
            '5. Documentation: Document any significant changes or fixes applied\n' +
            '6. Follow-up Monitoring: Schedule additional health checks\n\n' +
            'This is an automated critical alert from the Post-Merge Health Monitoring System.';

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 CRITICAL: Post-Merge Health Issues - Score: ${healthScore}/100`,
            body: issueBody,
            labels: ['critical', 'health-monitoring', 'automated', 'codegen', 'post-merge']
          });

  continuous-monitoring-setup:
    name: Setup Continuous Monitoring
    runs-on: ubuntu-latest
    needs: [post-merge-health-check]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure long-term monitoring
      run: |
        echo "🔧 Setting up continuous health monitoring..."
        
        # Schedule various monitoring tasks based on current health
        HEALTH_STATUS="${{ needs.post-merge-health-check.outputs.health-status }}"
        
        if [ -f "scripts/task-scheduler.js" ]; then
          case "$HEALTH_STATUS" in
            "critical")
              # Frequent monitoring for critical issues
              node scripts/task-scheduler.js schedule --type="health_check" --interval="30m" || echo "Failed to schedule critical health checks"
              node scripts/task-scheduler.js schedule --type="escalation_check" --interval="2h" || echo "Failed to schedule critical escalation checks"
              ;;
            "degraded"|"warning")
              # Regular monitoring for degraded health
              node scripts/task-scheduler.js schedule --type="health_check" --interval="2h" || echo "Failed to schedule degraded health checks"
              node scripts/task-scheduler.js schedule --type="improvement_check" --interval="6h" || echo "Failed to schedule improvement checks"
              ;;
            *)
              # Standard monitoring for healthy systems
              node scripts/task-scheduler.js schedule --type="health_check" --interval="6h" || echo "Failed to schedule standard health checks"
              node scripts/task-scheduler.js schedule --type="routine_check" --interval="24h" || echo "Failed to schedule routine checks"
              ;;
          esac
        else
          echo "⚠️ Task scheduler script not found, using default monitoring intervals"
        fi
        
        echo "✅ Continuous monitoring configured for status: $HEALTH_STATUS"

    - name: Update health baseline
      run: |
        echo "📊 Updating health baselines..."
        
        # Store current metrics as baseline for future comparisons
        mkdir -p .health-monitoring/baselines
        
        echo "${{ needs.post-merge-health-check.outputs.health-score }}" > \
          .health-monitoring/baselines/health-score-$(date +%Y%m%d).txt
        
        echo "${{ needs.post-merge-health-check.outputs.health-status }}" > \
          .health-monitoring/baselines/health-status-$(date +%Y%m%d).txt
        
        # Commit baselines if they've changed significantly
        if git diff --quiet .health-monitoring/baselines/ 2>/dev/null; then
          echo "No significant baseline changes"
        else
          echo "Baseline changes detected - would commit in real scenario"
        fi

  notification-summary:
    name: Health Monitoring Summary
    runs-on: ubuntu-latest
    needs: [post-merge-health-check, trigger-codegen-intervention, continuous-monitoring-setup]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "## 🏥 Post-Merge Health Monitoring Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Status:** ${{ needs.post-merge-health-check.outputs.health-status || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Score:** ${{ needs.post-merge-health-check.outputs.health-score || 'N/A' }}/100" >> $GITHUB_STEP_SUMMARY
        echo "- **Intervention Required:** ${{ needs.post-merge-health-check.outputs.requires-intervention || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Issues Detected:** ${{ needs.post-merge-health-check.outputs.issues-detected || 'None' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.trigger-codegen-intervention.result }}" = "success" ]; then
          echo "- ✅ CodeGen intervention triggered successfully" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.post-merge-health-check.outputs.requires-intervention }}" = "true" ]; then
          echo "- ⚠️ CodeGen intervention was required but may have failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Continuous monitoring has been configured" >> $GITHUB_STEP_SUMMARY
        echo "- Follow-up checks scheduled based on health status" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.post-merge-health-check.outputs.requires-intervention }}" = "true" ]; then
          echo "- 🚨 **Action Required:** Address the identified health issues" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ✅ No immediate action required" >> $GITHUB_STEP_SUMMARY
        fi