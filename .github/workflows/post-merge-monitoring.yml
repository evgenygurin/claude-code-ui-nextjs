name: Post-Merge Health Monitoring

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Check every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check to perform'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - quick
          - deep_analysis
          - problem_resolution_check
      force_codegen_trigger:
        description: 'Force CodeGen trigger regardless of health status'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  post-merge-health-check:
    name: Health Assessment
    runs-on: ubuntu-latest

    outputs:
      health-status: ${{ steps.health-assessment.outputs.status }}
      requires-intervention: ${{ steps.health-assessment.outputs.requires-intervention }}
      health-score: ${{ steps.health-assessment.outputs.score }}
      issues-detected: ${{ steps.health-assessment.outputs.issues }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Initialize health monitoring
        run: |
          echo "üè• Starting post-merge health assessment..."
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Check type: ${{ github.event.inputs.check_type || 'comprehensive' }}"

          # Create monitoring directories
          mkdir -p .health-monitoring/{reports,baselines,trends}

          # Set baseline timestamp for this check
          echo "$(date -u)" > .health-monitoring/last-check.txt

      - name: Run comprehensive health checks
        id: health-assessment
        run: |
          echo "üîç Running health assessment..."

          # Initialize variables
          HEALTH_SCORE=100
          ISSUES=()
          WARNINGS=()
          CRITICAL_ISSUES=false

          echo "## üìä Post-Merge Health Assessment Report" > health-report.md
          echo "**Timestamp:** $(date -u)" >> health-report.md
          echo "**Commit:** ${{ github.sha }}" >> health-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> health-report.md
          echo "" >> health-report.md

          # 1. Code Quality Check
          echo "### üßπ Code Quality" >> health-report.md
          if npm run lint 2>/dev/null; then
            echo "- ‚úÖ Linting: PASSED" >> health-report.md
          else
            echo "- ‚ùå Linting: FAILED" >> health-report.md
            ISSUES+=("linting_failed")
            HEALTH_SCORE=$((HEALTH_SCORE - 20))
          fi

          if npm run type-check 2>/dev/null; then
            echo "- ‚úÖ Type checking: PASSED" >> health-report.md
          else
            echo "- ‚ùå Type checking: FAILED" >> health-report.md
            ISSUES+=("type_check_failed")
            HEALTH_SCORE=$((HEALTH_SCORE - 25))
            CRITICAL_ISSUES=true
          fi

          # 2. Test Suite Health
          echo "### üß™ Test Suite" >> health-report.md
          if npm run test:ci 2>/dev/null; then
            echo "- ‚úÖ Tests: PASSED" >> health-report.md
          else
            echo "- ‚ùå Tests: FAILED" >> health-report.md
            ISSUES+=("tests_failed")
            HEALTH_SCORE=$((HEALTH_SCORE - 30))
            CRITICAL_ISSUES=true
          fi

          # 3. Build Health
          echo "### üèóÔ∏è Build System" >> health-report.md
          if npm run build 2>/dev/null; then
            echo "- ‚úÖ Build: SUCCESS" >> health-report.md
            
            # Check build size
            if [ -d ".next" ]; then
              BUILD_SIZE=$(du -sh .next | cut -f1)
              echo "- ‚ÑπÔ∏è Build size: $BUILD_SIZE" >> health-report.md
            fi
          else
            echo "- ‚ùå Build: FAILED" >> health-report.md
            ISSUES+=("build_failed")
            HEALTH_SCORE=$((HEALTH_SCORE - 35))
            CRITICAL_ISSUES=true
          fi

          # 4. Security Status
          echo "### üõ°Ô∏è Security" >> health-report.md
          if npm audit --audit-level=moderate 2>/dev/null; then
            echo "- ‚úÖ Security audit: CLEAN" >> health-report.md
          else
            echo "- ‚ö†Ô∏è Security audit: VULNERABILITIES DETECTED" >> health-report.md
            WARNINGS+=("security_vulnerabilities")
            HEALTH_SCORE=$((HEALTH_SCORE - 15))
          fi

          # 5. Final Assessment
          echo "### üìä Overall Health" >> health-report.md
          echo "- **Health Score:** $HEALTH_SCORE/100" >> health-report.md

          REQUIRES_INTERVENTION=false
          if [ ${#ISSUES[@]} -gt 0 ]; then
            echo "- **Issues Detected:** ${#ISSUES[@]}" >> health-report.md
            echo "- **Issue Types:** ${ISSUES[*]}" >> health-report.md
            REQUIRES_INTERVENTION=true
          fi

          if [ ${#WARNINGS[@]} -gt 0 ]; then
            echo "- **Warnings:** ${#WARNINGS[@]}" >> health-report.md
            echo "- **Warning Types:** ${WARNINGS[*]}" >> health-report.md
          fi

          # Determine overall status
          if [ "$CRITICAL_ISSUES" = true ]; then
            STATUS="critical"
            echo "- **Status:** üö® CRITICAL - Immediate intervention required" >> health-report.md
            REQUIRES_INTERVENTION=true
          elif [ $HEALTH_SCORE -lt 70 ]; then
            STATUS="degraded"
            echo "- **Status:** ‚ö†Ô∏è DEGRADED - Issues need attention" >> health-report.md
            REQUIRES_INTERVENTION=true
          elif [ $HEALTH_SCORE -lt 90 ]; then
            STATUS="warning"
            echo "- **Status:** üü° WARNING - Minor issues detected" >> health-report.md
          else
            STATUS="healthy"
            echo "- **Status:** ‚úÖ HEALTHY - All systems operational" >> health-report.md
          fi

          # Set outputs
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "requires-intervention=$REQUIRES_INTERVENTION" >> $GITHUB_OUTPUT
          echo "score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
          echo "issues=${ISSUES[*]}" >> $GITHUB_OUTPUT

          # Save report
          cp health-report.md ".health-monitoring/reports/$(date +%Y%m%d-%H%M%S)-health-report.md"

          echo "üè• Health assessment completed"
          echo "Status: $STATUS"
          echo "Score: $HEALTH_SCORE/100"
          echo "Requires intervention: $REQUIRES_INTERVENTION"

      - name: Upload health report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ github.run_number }}
          path: |
            health-report.md
            .health-monitoring/reports/
          retention-days: 30

  trigger-codegen-intervention:
    name: CodeGen Intervention
    runs-on: ubuntu-latest
    needs: [post-merge-health-check]
    if: needs.post-merge-health-check.outputs.requires-intervention == 'true' || github.event.inputs.force_codegen_trigger == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Trigger CodeGen analysis
        run: |
          echo "üö® Health issues detected - triggering CodeGen intervention"

          # Prepare detailed context for CodeGen
          HEALTH_STATUS="${{ needs.post-merge-health-check.outputs.health-status }}"
          HEALTH_SCORE="${{ needs.post-merge-health-check.outputs.health-score }}"
          ISSUES="${{ needs.post-merge-health-check.outputs.issues-detected }}"

          # Use the enhanced error handler
          node scripts/codegen-error-handler.js "post_merge_health_issues" \
            "Health status: $HEALTH_STATUS, Score: $HEALTH_SCORE/100, Issues: $ISSUES"

      - name: Create detailed GitHub issue
        if: needs.post-merge-health-check.outputs.health-status == 'critical'
        uses: actions/github-script@v7
        with:
          script: |
            const healthStatus = '${{ needs.post-merge-health-check.outputs.health-status }}';
            const healthScore = '${{ needs.post-merge-health-check.outputs.health-score }}';
            const issues = '${{ needs.post-merge-health-check.outputs.issues-detected }}';
            const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;

            const issueBody = `üö® **Critical Post-Merge Health Issues Detected**

            **Health Assessment Results:**
            - **Status:** ${healthStatus.toUpperCase()}
            - **Health Score:** ${healthScore}/100
            - **Issues Detected:** ${issues || 'None specified'}
            - **Monitoring Run:** [${runUrl}](${runUrl})
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            - **Timestamp:** ${new Date().toISOString()}

            ---

            @codegen **CRITICAL INTERVENTION REQUIRED**

            **This is an automated post-merge health monitoring alert.**`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Critical Health Issues: ${healthStatus} - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['post-merge', 'health-monitoring', 'critical', 'codegen', 'automated']
            });

  notification-summary:
    name: Health Monitoring Summary
    runs-on: ubuntu-latest
    needs: [post-merge-health-check, trigger-codegen-intervention]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## üè• Post-Merge Health Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Status:** ${{ needs.post-merge-health-check.outputs.health-status || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Score:** ${{ needs.post-merge-health-check.outputs.health-score || 'N/A' }}/100" >> $GITHUB_STEP_SUMMARY
          echo "- **Intervention Required:** ${{ needs.post-merge-health-check.outputs.requires-intervention || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Issues Detected:** ${{ needs.post-merge-health-check.outputs.issues-detected || 'None' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.trigger-codegen-intervention.result }}" = "success" ]; then
            echo "- ‚úÖ CodeGen intervention triggered successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.post-merge-health-check.outputs.requires-intervention }}" = "true" ]; then
            echo "- ‚ö†Ô∏è CodeGen intervention was required but may have failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Continuous monitoring has been configured" >> $GITHUB_STEP_SUMMARY
          echo "- Follow-up checks scheduled based on health status" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.post-merge-health-check.outputs.requires-intervention }}" = "true" ]; then
            echo "- üö® **Action Required:** Address the identified health issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚úÖ No immediate action required" >> $GITHUB_STEP_SUMMARY
          fi
