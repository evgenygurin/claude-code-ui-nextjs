name: CodeGen Integration

on:
  workflow_dispatch:
    inputs:
      error_type:
        description: 'Type of error to handle'
        required: true
        default: 'manual_trigger'
      error_details:
        description: 'Error details'
        required: false
        default: 'Manual CodeGen trigger'

jobs:
  codegen-placeholder:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: CodeGen Handler (Manual Trigger)
      run: |
        echo "ü§ñ CodeGen manual trigger activated"
        echo "Error Type: ${{ github.event.inputs.error_type }}"
        echo "Error Details: ${{ github.event.inputs.error_details }}"
        echo "This workflow can be used to manually trigger CodeGen analysis"
        
        ERROR_TYPE="${{ github.event.inputs.error_type || 'ci_failure' }}"
        ERROR_DETAILS="${{ github.event.inputs.error_details || 'CI/CD pipeline failure detected' }}"
        
        # Run the error handler script (this won't fail the build)
        if [ -f "scripts/codegen-error-handler.js" ]; then
          node scripts/codegen-error-handler.js "$ERROR_TYPE" "$ERROR_DETAILS" || echo "Handler completed with warnings"
        else
          echo "Error handler script not found, continuing..."
        fi
        
    - name: Create GitHub Issue for CodeGen
      if: failure() || github.event.workflow_run.conclusion == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const errorType = '${{ github.event.inputs.error_type || "ci_failure" }}';
          const errorDetails = '${{ github.event.inputs.error_details || "CI/CD pipeline failure" }}';
          const runUrl = '${{ github.event.workflow_run.html_url || github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
          
          const issueBody = [
            'üö® Automated CI/CD Failure Report',
            '',
            'Error Type: ' + errorType,
            'Error Details: ' + errorDetails,
            'Workflow Run: ' + runUrl,
            'Branch: ${{ github.ref_name }}',
            'Commit: ${{ github.sha }}',
            'Timestamp: ' + new Date().toISOString(),
            '',
            'Please analyze this CI/CD failure and implement fixes.',
            '',
            'This is an automated issue created by the CI/CD error handling system.'
          ].join('\n');

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® CI/CD Failure: ${errorType} - ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: ['ci/cd', 'automated', 'codegen', 'bug', 'priority-high']
          });

  check-pending-tasks:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check Pending CodeGen Tasks
      run: |
        echo "‚è∞ Checking for pending CodeGen tasks..."
        if [ -f "scripts/task-scheduler.js" ]; then
          node scripts/task-scheduler.js check || echo "Task check completed with warnings"
        else
          echo "Task scheduler script not found, skipping..."
        fi

    - name: Schedule New Task if Needed
      run: |
        echo "üìã Scheduling follow-up tasks if needed..."
        # Schedule a follow-up task for this workflow
        if [ -f "scripts/task-scheduler.js" ]; then
          node scripts/task-scheduler.js schedule || echo "Task scheduling completed with warnings"
          echo "Follow-up task scheduled successfully"
        else
          echo "Task scheduler script not found, skipping..."
        fi

    - name: Cleanup Old Tasks
      run: |
        echo "üßπ Cleaning up old completed tasks..."
        if [ -f "scripts/task-scheduler.js" ]; then
          node scripts/task-scheduler.js cleanup || echo "Task cleanup completed with warnings"
        else
          echo "Task scheduler script not found, skipping..."
        fi

  notify-codegen:
    runs-on: ubuntu-latest
    if: always()
    needs: [codegen-placeholder, check-pending-tasks]
    
    steps:
    - name: Notify CodeGen Service
      run: |
        echo "üì° Notifying CodeGen service about workflow completion..."
        
        # In a real implementation, this would call the CodeGen API
        # to notify about the workflow status and any pending tasks
        
        echo "Workflow Status: ${{ needs.codegen-placeholder.result }}"
        echo "Task Check Status: ${{ needs.check-pending-tasks.result }}"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        
        # This could trigger a webhook, API call, or create a GitHub comment
        # to notify CodeGen about the current status
        
        echo "‚úÖ CodeGen notification completed"
