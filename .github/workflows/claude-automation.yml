name: Claude Automation Suite
on:
  # Автоматическое улучшение кода при merge в main
  push:
    branches: [main]
    
  # Реакция на создание issues с определенными метками
  issues:
    types: [labeled]
    
  # Scheduled tasks
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: "0 2 * * *"
    # Weekly dependency update check on Sundays
    - cron: "0 0 * * 0"
    # Monthly comprehensive audit
    - cron: "0 0 1 * *"
    
  # Manual triggers with parameters
  workflow_dispatch:
    inputs:
      task:
        description: 'Automation task to run'
        required: true
        default: 'improve-code'
        type: choice
        options:
          - improve-code
          - update-dependencies
          - generate-tests
          - optimize-performance
          - update-documentation
          - security-hardening
          - refactor-components
          - add-storybook-stories

jobs:
  automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
      security-events: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Claude Automated Tasks
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          # Базовая ветка для создания новых веток
          base_branch: main
          
          # Префикс для автоматических веток
          branch_prefix: "claude/auto-"
          
          # Включаем подпись коммитов
          use_commit_signing: true
          
          # Расширенные разрешения
          additional_permissions: |
            actions: read
            security-events: write
            
          # Динамический prompt для разных задач
          prompt: |
            ${{ github.event_name == 'issues' && contains(github.event.label.name, 'needs-fix') && format('
            REPO: {0}
            ISSUE NUMBER: {1}
            ISSUE TITLE: {2}
            
            This issue has been labeled as "needs-fix". Please:
            1. Analyze the issue description
            2. Create a fix branch
            3. Implement the solution
            4. Add appropriate tests
            5. Create a pull request with the fix
            6. Link it to the issue
            
            Use best practices and ensure the fix is production-ready.
            ', github.repository, github.event.issue.number, github.event.issue.title) || '' }}
            
            ${{ github.event_name == 'schedule' && github.event.schedule == '0 2 * * *' && '
            Daily Security Scan:
            
            1. Run security audit on dependencies
            2. Check for exposed secrets or API keys
            3. Review authentication implementations
            4. Scan for XSS vulnerabilities
            5. Check for SQL injection risks
            6. Review CORS configurations
            7. Validate input sanitization
            
            If critical issues found:
            - Create high-priority issue
            - Attempt automatic fix if safe
            - Notify via PR comment
            ' || '' }}
            
            ${{ github.event_name == 'schedule' && github.event.schedule == '0 0 * * 0' && '
            Weekly Dependency Update:
            
            1. Check all dependencies for updates
            2. Prioritize security updates
            3. Test compatibility with updates
            4. Create PR with updates that pass tests
            5. Document breaking changes
            6. Update lock files
            
            Group updates by:
            - Security patches (critical)
            - Minor updates (backward compatible)
            - Major updates (breaking changes)
            ' || '' }}
            
            ${{ github.event_name == 'push' && '
            Post-merge Code Improvements:
            
            Analyze the recent merge to main and:
            1. Optimize any inefficient code patterns
            2. Add missing TypeScript types
            3. Improve error handling
            4. Add logging where appropriate
            5. Update tests for new code
            6. Generate missing documentation
            
            Create a PR with improvements if any found.
            ' || '' }}
            
            ${{ github.event_name == 'workflow_dispatch' && inputs.task == 'improve-code' && '
            Comprehensive Code Improvement:
            
            1. Analyze entire codebase for:
               - Code duplication (DRY violations)
               - Complex functions that need refactoring
               - Missing error boundaries
               - Unoptimized re-renders
               - Missing memoization
               
            2. Implement improvements:
               - Extract shared logic to hooks/utils
               - Split complex components
               - Add performance optimizations
               - Improve type safety
               
            3. Create PR with all improvements
            ' || '' }}
            
            ${{ github.event_name == 'workflow_dispatch' && inputs.task == 'generate-tests' && '
            Automated Test Generation:
            
            1. Identify components/functions without tests
            2. Generate comprehensive test suites:
               - Unit tests for utilities
               - Component tests with Testing Library
               - Integration tests for API routes
               - E2E tests for critical paths
               
            3. Ensure minimum 80% coverage
            4. Add test documentation
            5. Create PR with new tests
            ' || '' }}
            
            ${{ github.event_name == 'workflow_dispatch' && inputs.task == 'optimize-performance' && '
            Performance Optimization:
            
            1. Analyze bundle size
            2. Identify performance bottlenecks:
               - Large dependencies
               - Unoptimized images
               - Synchronous operations
               - Memory leaks
               
            3. Implement optimizations:
               - Code splitting
               - Lazy loading
               - Image optimization
               - Caching strategies
               - Database query optimization
               
            4. Measure improvements
            5. Create PR with optimizations
            ' || '' }}
            
            ${{ github.event_name == 'workflow_dispatch' && inputs.task == 'update-documentation' && '
            Documentation Update:
            
            1. Scan codebase for undocumented APIs
            2. Generate/update:
               - API documentation
               - Component documentation
               - README sections
               - Setup guides
               - Architecture docs
               
            3. Add code examples
            4. Update changelog
            5. Create PR with documentation
            ' || '' }}
            
            ${{ github.event_name == 'workflow_dispatch' && inputs.task == 'add-storybook-stories' && '
            Storybook Stories Generation:
            
            1. Find components without stories
            2. Generate comprehensive stories:
               - Default states
               - Interactive examples
               - Edge cases
               - Different props combinations
               - Accessibility scenarios
               
            3. Add documentation
            4. Test all stories
            5. Create PR with new stories
            ' || '' }}
            
          # Продвинутая конфигурация
          claude_args: |
            --model claude-3-5-sonnet-20241022
            --max-turns 25
            --allowedTools "Bash,Read,Write,Edit,MultiEdit,WebSearch"
            --system-prompt "You are Claude, an expert automation engineer. You proactively improve code quality, security, and performance. You follow best practices and write production-ready code. Always test your changes before creating PRs."
            
      - name: Run tests after changes
        if: success()
        run: |
          npm run type-check || true
          npm run lint || true
          npm test || true
          
      - name: Create summary
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = core.summary
              .addHeading('Claude Automation Results')
              .addRaw(`
                - **Trigger**: ${context.eventName}
                - **Task**: ${{ inputs.task || 'automatic' }}
                - **Status**: ${process.env.CLAUDE_STATUS || 'completed'}
                - **Time**: ${new Date().toISOString()}
              `)
              .addSeparator()
              .addHeading('Next Steps', 3)
              .addList([
                'Review any created PRs',
                'Check new issues for findings',
                'Verify test results',
                'Monitor performance metrics'
              ]);
            
            await summary.write();