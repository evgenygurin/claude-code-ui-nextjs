name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  FORCE_COLOR: 1
  CI: true

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: |
        npm run lint || {
          echo "‚ùå Linting failed - will trigger CodeGen"
          exit 1
        }

    - name: Run type checking
      run: |
        npm run type-check || {
          echo "‚ùå Type checking failed - will trigger CodeGen"
          exit 1
        }

    - name: Run tests
      run: |
        npm run test:ci || {
          echo "‚ùå Tests failed - will trigger CodeGen"
          exit 1
        }

    - name: Upload coverage reports
      if: always()
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Security scan
      run: |
        echo "üîç Running security scan..."
        
        # Install TruffleHog
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
        
        # Run security scan
        trufflehog filesystem --directory=. --exclude-paths=.trufflehogignore --no-verification --json > trufflehog-results.json || true
        
        # Check results
        if [ -s trufflehog-results.json ]; then
          echo "‚ùå SECURITY ALERT: Potential secrets detected!"
          cat trufflehog-results.json
          exit 1
        else
          echo "‚úÖ No hardcoded secrets detected"
        fi

    - name: Build application
      run: |
        npm run build || {
          echo "‚ùå Build failed - will trigger CodeGen"
          exit 1
        }

    - name: Check build size
      run: |
        echo "üìä Build completed successfully"
        du -sh .next 2>/dev/null || echo "Build directory check completed"

  trigger-codegen-on-failure:
    name: Trigger CodeGen on Failure
    runs-on: ubuntu-latest
    needs: [test]
    if: failure()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Trigger CodeGen Error Handler
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üö® CI/CD Pipeline failed - triggering CodeGen"
        
        # Determine the type of failure
        if [[ "${{ needs.test.result }}" == "failure" ]]; then
          ERROR_TYPE="ci_pipeline_failure"
          ERROR_DETAILS="One or more CI/CD steps failed: linting, type-checking, testing, security scan, or build"
        else
          ERROR_TYPE="unknown_failure"
          ERROR_DETAILS="Unknown failure in CI/CD pipeline"
        fi
        
        # Trigger error handler
        node scripts/codegen-error-handler.js "$ERROR_TYPE" "$ERROR_DETAILS"

    - name: Schedule Follow-up Task
      run: |
        echo "‚è∞ Scheduling 1-hour follow-up task..."
        node scripts/task-scheduler.js schedule

    - name: Create PR Comment (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `üö® **CI/CD Pipeline Failure**

The automated CI/CD pipeline has failed for this PR. CodeGen has been automatically triggered to analyze and fix the issues.

## What happened:
- ‚ùå CI/CD pipeline failed on: ${{ github.sha }}
- ü§ñ CodeGen error handler activated
- ‚è∞ Follow-up check scheduled for 1 hour

## What's next:
1. CodeGen will analyze the failure
2. Fixes will be applied automatically
3. Pipeline will be re-run
4. If issues persist, the cycle will repeat

## Manual intervention:
If you need to intervene manually, you can:
- Check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details
- Review the CodeGen error reports in \`.codegen-reports/\`
- Manually trigger CodeGen with: \`npm run codegen:check\`

---
*This comment was generated automatically by the CI/CD error handling system.*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test]
    if: success() && github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for preview
      run: npm run build

    - name: Deploy to Vercel Preview
      uses: amondnet/vercel-action@v25
      if: env.VERCEL_TOKEN != ''
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [test]
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build

    - name: Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      if: env.VERCEL_TOKEN != ''
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

    - name: Create Sentry release
      if: env.SENTRY_AUTH_TOKEN != ''
      run: |
        npm install -g @sentry/cli
        export SENTRY_ORG="${{ secrets.SENTRY_ORG }}"
        export SENTRY_PROJECT="${{ secrets.SENTRY_PROJECT }}"
        sentry-cli releases new "${{ github.sha }}"
        sentry-cli releases set-commits "${{ github.sha }}" --auto
        sentry-cli releases finalize "${{ github.sha }}"
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

  success-notification:
    name: Success Notification
    runs-on: ubuntu-latest
    needs: [test, deploy-preview, deploy-production]
    if: success()
    
    steps:
    - name: Notify Success
      run: |
        echo "‚úÖ CI/CD Pipeline completed successfully!"
        echo "üéâ All checks passed:"
        echo "  - ‚úÖ Linting"
        echo "  - ‚úÖ Type checking" 
        echo "  - ‚úÖ Tests"
        echo "  - ‚úÖ Security scan"
        echo "  - ‚úÖ Build"
        echo "  - ‚úÖ Deployment"
        echo ""
        echo "üöÄ Application is ready for use!"